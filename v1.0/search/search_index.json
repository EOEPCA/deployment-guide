{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deployment Guide \u2693\ufe0e The Deployment Guide describes how each building-block comprising the EOEPCA Reference Implementation is configured and deployed. A full system deployment is described, in which components are deployed with complementary configurations that facilitate their integration as a coherent system. Nevertheless, each component can be cherry-picked from this system deployment for individual re-use. The deployment is organised into the following sections: Cluster Establish the Kubernetes cluster and other prerequisites for the deployment of the EOEPCA system. EOEPCA Deployment of the EOEPCA components.","title":"Introduction"},{"location":"#deployment-guide","text":"The Deployment Guide describes how each building-block comprising the EOEPCA Reference Implementation is configured and deployed. A full system deployment is described, in which components are deployed with complementary configurations that facilitate their integration as a coherent system. Nevertheless, each component can be cherry-picked from this system deployment for individual re-use. The deployment is organised into the following sections: Cluster Establish the Kubernetes cluster and other prerequisites for the deployment of the EOEPCA system. EOEPCA Deployment of the EOEPCA components.","title":"Deployment Guide"},{"location":"ades/","text":"Application Deployment & Execution Service (ADES) \u2693\ufe0e The ADES provides a platform-hosted execution engine through which users can initiate parameterised processing jobs using applications made available within the platform - supporting the efficient execution of the processing \u2018close to the data\u2019. Users can deploy specific \u2018applications\u2019 to the ADES, which may be their own applications, or those published by other platform users. Helm Chart \u2693\ufe0e The ADES is deployed via the ades helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the ades chart . helm install --values ades-values.yaml ades eoepca/ades Values \u2693\ufe0e At minimum, values for the following attributes should be specified: Details of the S3 Object Store for stage-out of processing results Dynamic provisioning StorageClass of ReadWriteMany storage (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the ADES will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . Example ades-values.yaml \u2026 workflowExecutor: inputs: STAGEOUT_AWS_SERVICEURL: http://minio.192.168.49.123.nip.io STAGEOUT_AWS_ACCESS_KEY_ID: eoepca STAGEOUT_AWS_SECRET_ACCESS_KEY: changeme STAGEOUT_AWS_REGION: us-east-1 STAGEOUT_OUTPUT: s3://eoepca processingStorageClass: standard persistence: storageClass: standard ingress: enabled: true annotations: kubernetes.io/ingress.class: nginx ingress.kubernetes.io/ssl-redirect: \"false\" hosts: - host: ades.192.168.49.123.nip.io paths: [\"/\"] tls: - hosts: - ades.192.168.49.123.nip.io secretName: ades-tls Protection \u2693\ufe0e As described in section Resource Protection , the resource-guard component can be inserted into the request path of the ADES service to provide access authorization decisions helm install --values ades-guard-values.yaml ades-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the ADES for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent \u2026 Example ades-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: ades pep: ades-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth # customDefaultResources: # - name: \"Eric's space\" # description: \"Protected Access for eric to his space in the ADES\" # resource_uri: \"/eric\" # scopes: [] # default_owner: \"a9812efe-fc0c-49d3-8115-0f36883a84b9\" # - name: \"Bob's space\" # description: \"Protected Access for bob to his space in the ADES\" # resource_uri: \"/bob\" # scopes: [] # default_owner: \"4ccae3a1-3fad-4ffe-bfa7-cce851143780\" volumeClaim: name: eoepca-proc-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: ades-agent nginxIntegration: enabled: true hosts: - host: ades paths: - path: /(.*) service: name: ades port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"proc-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint Client Secret \u2693\ufe0e The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n proc create secret generic proc-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > proc-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: proc-client namespace: proc data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io. In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml ADES Usage Samples \u2693\ufe0e This section includes some sample requests to test the deployed ADES. NOTES: It assumed that the ADES is subject to access protection (ref. Resource Protection ), in which case a User ID Token must be provided with the request - typically in the HTTP header X-User-Id . See section User ID Token for more details. The samples assume a user eric List Processes \u2693\ufe0e List available processes. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/wps3/processes' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' Deploy Process \u2693\ufe0e Deploy the sample application snuggs . curl --location --request POST 'https://ades.192.168.49.123.nip.io/eric/wps3/processes' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"inputs\": [ { \"id\": \"applicationPackage\", \"input\": { \"format\": { \"mimeType\": \"application/cwl\" }, \"value\": { \"href\": \"https://raw.githubusercontent.com/EOEPCA/app-snuggs/main/app-package.cwl\" } } } ], \"outputs\": [ { \"format\": { \"mimeType\": \"string\", \"schema\": \"string\", \"encoding\": \"string\" }, \"id\": \"deployResult\", \"transmissionMode\": \"value\" } ], \"mode\": \"auto\", \"response\": \"raw\" }' Get Process Details \u2693\ufe0e Get details for a deployed process. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/wps3/processes/snuggs-0_3_0' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' Execute Process \u2693\ufe0e Execute a process with supplied parameterisation. curl --location --request POST 'https://ades.192.168.49.123.nip.io/eric/wps3/processes/snuggs-0_3_0/jobs' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"inputs\": [ { \"id\": \"input_reference\", \"input\": { \"dataType\": { \"name\": \"application/json\" }, \"value\": \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_36RTT_20191205_0_L2A\" } }, { \"id\": \"s_expression\", \"input\": { \"dataType\": { \"name\": \"string\" }, \"value\": \"ndvi:(/ (- B05 B03) (+ B05 B03))\" } } ], \"outputs\": [ { \"format\": { \"mimeType\": \"string\", \"schema\": \"string\", \"encoding\": \"string\" }, \"id\": \"wf_outputs\", \"transmissionMode\": \"value\" } ], \"mode\": \"auto\", \"response\": \"raw\" }' Job Status \u2693\ufe0e Once a processes execution has been initiated then its progress can monitored via a job-specific URL that is returned in the HTTP response headers of the execute request. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/watchjob/processes/snuggs-0_3_0/jobs/2e0fabf4-4ed6-11ec-b857-626a98159388' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' Job Result \u2693\ufe0e Once the job execution has completed, then the results can be obtained. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/watchjob/processes/snuggs-0_3_0/jobs/2e0fabf4-4ed6-11ec-b857-626a98159388/result' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' Undeploy Process \u2693\ufe0e A process can be deleted (undeployed). curl --location --request DELETE 'https://ades.192.168.49.123.nip.io/eric/wps3/processes/snuggs-0_3_0' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' Additional Information \u2693\ufe0e Additional information regarding the ADES can be found at: Helm Chart Wiki GitHub Repository","title":"Application Deployment & Execution"},{"location":"ades/#application-deployment-execution-service-ades","text":"The ADES provides a platform-hosted execution engine through which users can initiate parameterised processing jobs using applications made available within the platform - supporting the efficient execution of the processing \u2018close to the data\u2019. Users can deploy specific \u2018applications\u2019 to the ADES, which may be their own applications, or those published by other platform users.","title":"Application Deployment &amp; Execution Service (ADES)"},{"location":"ades/#helm-chart","text":"The ADES is deployed via the ades helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the ades chart . helm install --values ades-values.yaml ades eoepca/ades","title":"Helm Chart"},{"location":"ades/#values","text":"At minimum, values for the following attributes should be specified: Details of the S3 Object Store for stage-out of processing results Dynamic provisioning StorageClass of ReadWriteMany storage (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the ADES will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . Example ades-values.yaml \u2026 workflowExecutor: inputs: STAGEOUT_AWS_SERVICEURL: http://minio.192.168.49.123.nip.io STAGEOUT_AWS_ACCESS_KEY_ID: eoepca STAGEOUT_AWS_SECRET_ACCESS_KEY: changeme STAGEOUT_AWS_REGION: us-east-1 STAGEOUT_OUTPUT: s3://eoepca processingStorageClass: standard persistence: storageClass: standard ingress: enabled: true annotations: kubernetes.io/ingress.class: nginx ingress.kubernetes.io/ssl-redirect: \"false\" hosts: - host: ades.192.168.49.123.nip.io paths: [\"/\"] tls: - hosts: - ades.192.168.49.123.nip.io secretName: ades-tls","title":"Values"},{"location":"ades/#protection","text":"As described in section Resource Protection , the resource-guard component can be inserted into the request path of the ADES service to provide access authorization decisions helm install --values ades-guard-values.yaml ades-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the ADES for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent \u2026 Example ades-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: ades pep: ades-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth # customDefaultResources: # - name: \"Eric's space\" # description: \"Protected Access for eric to his space in the ADES\" # resource_uri: \"/eric\" # scopes: [] # default_owner: \"a9812efe-fc0c-49d3-8115-0f36883a84b9\" # - name: \"Bob's space\" # description: \"Protected Access for bob to his space in the ADES\" # resource_uri: \"/bob\" # scopes: [] # default_owner: \"4ccae3a1-3fad-4ffe-bfa7-cce851143780\" volumeClaim: name: eoepca-proc-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: ades-agent nginxIntegration: enabled: true hosts: - host: ades paths: - path: /(.*) service: name: ades port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"proc-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint","title":"Protection"},{"location":"ades/#client-secret","text":"The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n proc create secret generic proc-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > proc-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: proc-client namespace: proc data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io. In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml","title":"Client Secret"},{"location":"ades/#ades-usage-samples","text":"This section includes some sample requests to test the deployed ADES. NOTES: It assumed that the ADES is subject to access protection (ref. Resource Protection ), in which case a User ID Token must be provided with the request - typically in the HTTP header X-User-Id . See section User ID Token for more details. The samples assume a user eric","title":"ADES Usage Samples"},{"location":"ades/#list-processes","text":"List available processes. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/wps3/processes' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json'","title":"List Processes"},{"location":"ades/#deploy-process","text":"Deploy the sample application snuggs . curl --location --request POST 'https://ades.192.168.49.123.nip.io/eric/wps3/processes' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"inputs\": [ { \"id\": \"applicationPackage\", \"input\": { \"format\": { \"mimeType\": \"application/cwl\" }, \"value\": { \"href\": \"https://raw.githubusercontent.com/EOEPCA/app-snuggs/main/app-package.cwl\" } } } ], \"outputs\": [ { \"format\": { \"mimeType\": \"string\", \"schema\": \"string\", \"encoding\": \"string\" }, \"id\": \"deployResult\", \"transmissionMode\": \"value\" } ], \"mode\": \"auto\", \"response\": \"raw\" }'","title":"Deploy Process"},{"location":"ades/#get-process-details","text":"Get details for a deployed process. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/wps3/processes/snuggs-0_3_0' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json'","title":"Get Process Details"},{"location":"ades/#execute-process","text":"Execute a process with supplied parameterisation. curl --location --request POST 'https://ades.192.168.49.123.nip.io/eric/wps3/processes/snuggs-0_3_0/jobs' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"inputs\": [ { \"id\": \"input_reference\", \"input\": { \"dataType\": { \"name\": \"application/json\" }, \"value\": \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_36RTT_20191205_0_L2A\" } }, { \"id\": \"s_expression\", \"input\": { \"dataType\": { \"name\": \"string\" }, \"value\": \"ndvi:(/ (- B05 B03) (+ B05 B03))\" } } ], \"outputs\": [ { \"format\": { \"mimeType\": \"string\", \"schema\": \"string\", \"encoding\": \"string\" }, \"id\": \"wf_outputs\", \"transmissionMode\": \"value\" } ], \"mode\": \"auto\", \"response\": \"raw\" }'","title":"Execute Process"},{"location":"ades/#job-status","text":"Once a processes execution has been initiated then its progress can monitored via a job-specific URL that is returned in the HTTP response headers of the execute request. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/watchjob/processes/snuggs-0_3_0/jobs/2e0fabf4-4ed6-11ec-b857-626a98159388' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json'","title":"Job Status"},{"location":"ades/#job-result","text":"Once the job execution has completed, then the results can be obtained. curl --location --request GET 'https://ades.192.168.49.123.nip.io/eric/watchjob/processes/snuggs-0_3_0/jobs/2e0fabf4-4ed6-11ec-b857-626a98159388/result' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json'","title":"Job Result"},{"location":"ades/#undeploy-process","text":"A process can be deleted (undeployed). curl --location --request DELETE 'https://ades.192.168.49.123.nip.io/eric/wps3/processes/snuggs-0_3_0' \\ --header 'X-User-Id: <user-id-token>' \\ --header 'Accept: application/json'","title":"Undeploy Process"},{"location":"ades/#additional-information","text":"Additional information regarding the ADES can be found at: Helm Chart Wiki GitHub Repository","title":"Additional Information"},{"location":"cluster-prerequisites/","text":"Cluster Prerequisites \u2693\ufe0e The following prerequisite components are assumed to be deployed in the cluster. Nginx Ingress Controller \u2693\ufe0e # Add the helm repository helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update # Install the Nginx Ingress Controller helm chart helm upgrade -i ingress-nginx ingress-nginx/ingress-nginx --wait To target the Nginx Ingress Controller the kubernetes.io/ingress.class: nginx annotation must be applied to the Ingress resource\u2026 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx ... Cert Manager \u2693\ufe0e # Add the helm repository helm repo add jetstack https://charts.jetstack.io helm repo update # Install the Cert Manager helm chart helm upgrade -i cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --set installCRDs=true Letsencrypt Certificates \u2693\ufe0e Once the Certificate Manager is deployed, then we can establish ClusterIssuer operators in the cluster to support use of TLS with service Ingress endpoints. For Letsencrypt we can define two ClusterIssuer - for production and for staging . NOTE that these require the cluster to be publicly accessible, in order for the http01 acme flow to verify the domain ownership. Local development deployments will typically not have public IP/DNS - in which case the system deployment can proceed, but without TLS support for the service endpoints. Production \u2693\ufe0e apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-production spec: acme: # You must replace this email address with your own. # Let's Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: eoepca.systemteam@telespazio.com server: https://acme-v02.api.letsencrypt.org/directory privateKeySecretRef: # Secret resource that will be used to store the account's private key. name: letsencrypt-production-account-key # Add a single challenge solver, HTTP01 using nginx solvers: - http01: ingress: class: nginx Staging \u2693\ufe0e apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let's Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: eoepca.systemteam@telespazio.com server: https://acme-staging-v02.api.letsencrypt.org/directory privateKeySecretRef: # Secret resource that will be used to store the account's private key. name: letsencrypt-staging-account-key # Add a single challenge solver, HTTP01 using nginx solvers: - http01: ingress: class: nginx To exploit the specified ClusterIssuer the cert-manager.io/cluster-issuer annotation must be applied to the Ingress resource. For example\u2026 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx cert-manager.io/cluster-issuer: letsencrypt-production ... Sealed Secrets \u2693\ufe0e The EOEPCA development team maintain their deployment configurations in GitHub - for declarative, reproducible cluster deployments. Various Secret are relied upon by the system services. Secrets should not be exposed by commit to GitHub. Instead SealedSecret are committed to GitHub, which are encrypted, and can only be decrypted by the sealed-secret-controller that runs within the cluster. The sealed-secret-controller decrypts the SealedSecret to a regular Secret (of the same name) that can then be consumed by the cluster components. The sealed-secret-controller is deployed to the cluster using the helm chart\u2026 helm repo add bitnami-sealed-secrets https://bitnami-labs.github.io/sealed-secrets helm repo update helm install --version 1.13.2 --create-namespace --namespace infra \\ eoepca-sealed-secrets bitnami-sealed-secrets/sealed-secrets Once the controller is deployed within the cluster, then the kubeseal command can be used to create a SealedSecret from a regular Secret , as follows\u2026 Create example Secret\u2026 kubectl -n test create secret generic mysecret \\ --from-literal=password=changeme \\ --dry-run=client -o yaml \\ > mysecret.yaml Create SealedSecret from Secret using kubeseal\u2026 kubeseal -o yaml \\ --controller-name eoepca-sealed-secrets \\ --controller-namespace infra \\ < mysecret.yaml \\ > mysecret-sealed.yaml References \u2693\ufe0e Sealed Secrets on GitHub kubeseal Release MinIO Object Storage \u2693\ufe0e Various building blocks require access to an S3-compatible object storage service. In particular the ADES processing service expects to stage-out its processing results to S3 object storage. Ideally the cloud provider for your deployment will make available a suitable object storage service. As a workaround, in the absence of an existing object storage, it is possible to use MinIO to establish an object storage service within the Kubernetes cluster. We use the minio helm chart provided by bitnami . # Add the bitnami helm repository helm repo add bitnami https://charts.bitnami.com/bitnami helm repo update # Install the minio helm chart helm upgrade -i minio -f minio-values.yaml bitnami/minio The minio deployment is customised via the values file minio-values.yaml , for example\u2026 auth: rootUser: eoepca rootPassword: changeme ingress: enabled: true ingressClassName: nginx hostname: minio-console.192.168.49.123.nip.io apiIngress: enabled: true ingressClassName: nginx hostname: minio.192.168.49.123.nip.io persistence: storageClass: standard s3cmd Configuration \u2693\ufe0e The s3cmd can be configured for access to the MinIO deployment. The --configure option can be used to prepare a suitable configuration file for s3cmd \u2026 s3cmd -c mys3cfg --configure In response to the prompts, the following configuration selections are applicable to the above settings\u2026 Access Key: eoepca Secret Key: changeme Default Region: us-east-1 S3 Endpoint: minio.192.168.49.123.nip.io DNS-style bucket+hostname:port template for accessing a bucket: minio.192.168.49.123.nip.io Encryption password: Path to GPG program: /usr/bin/gpg Use HTTPS protocol: False HTTP Proxy server name: HTTP Proxy server port: 0 Save the configuration file, and check access to the S3 object store with\u2026 # Create a bucket s3cmd -c mys3cfg mb s3://eoepca # List buckets s3cmd -c mys3cfg ls For example, using our sample deployment, the following can be used to interface with the MinIO service deployed in minikube\u2026 s3cmd -c local-deploy/cluster/minio/s3cfg ls References \u2693\ufe0e MinIO Helm Chart MinIO Helm Chart on GitHub","title":"Cluster Prerequisites"},{"location":"cluster-prerequisites/#cluster-prerequisites","text":"The following prerequisite components are assumed to be deployed in the cluster.","title":"Cluster Prerequisites"},{"location":"cluster-prerequisites/#nginx-ingress-controller","text":"# Add the helm repository helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update # Install the Nginx Ingress Controller helm chart helm upgrade -i ingress-nginx ingress-nginx/ingress-nginx --wait To target the Nginx Ingress Controller the kubernetes.io/ingress.class: nginx annotation must be applied to the Ingress resource\u2026 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx ...","title":"Nginx Ingress Controller"},{"location":"cluster-prerequisites/#cert-manager","text":"# Add the helm repository helm repo add jetstack https://charts.jetstack.io helm repo update # Install the Cert Manager helm chart helm upgrade -i cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --set installCRDs=true","title":"Cert Manager"},{"location":"cluster-prerequisites/#letsencrypt-certificates","text":"Once the Certificate Manager is deployed, then we can establish ClusterIssuer operators in the cluster to support use of TLS with service Ingress endpoints. For Letsencrypt we can define two ClusterIssuer - for production and for staging . NOTE that these require the cluster to be publicly accessible, in order for the http01 acme flow to verify the domain ownership. Local development deployments will typically not have public IP/DNS - in which case the system deployment can proceed, but without TLS support for the service endpoints.","title":"Letsencrypt Certificates"},{"location":"cluster-prerequisites/#production","text":"apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-production spec: acme: # You must replace this email address with your own. # Let's Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: eoepca.systemteam@telespazio.com server: https://acme-v02.api.letsencrypt.org/directory privateKeySecretRef: # Secret resource that will be used to store the account's private key. name: letsencrypt-production-account-key # Add a single challenge solver, HTTP01 using nginx solvers: - http01: ingress: class: nginx","title":"Production"},{"location":"cluster-prerequisites/#staging","text":"apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let's Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: eoepca.systemteam@telespazio.com server: https://acme-staging-v02.api.letsencrypt.org/directory privateKeySecretRef: # Secret resource that will be used to store the account's private key. name: letsencrypt-staging-account-key # Add a single challenge solver, HTTP01 using nginx solvers: - http01: ingress: class: nginx To exploit the specified ClusterIssuer the cert-manager.io/cluster-issuer annotation must be applied to the Ingress resource. For example\u2026 apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx cert-manager.io/cluster-issuer: letsencrypt-production ...","title":"Staging"},{"location":"cluster-prerequisites/#sealed-secrets","text":"The EOEPCA development team maintain their deployment configurations in GitHub - for declarative, reproducible cluster deployments. Various Secret are relied upon by the system services. Secrets should not be exposed by commit to GitHub. Instead SealedSecret are committed to GitHub, which are encrypted, and can only be decrypted by the sealed-secret-controller that runs within the cluster. The sealed-secret-controller decrypts the SealedSecret to a regular Secret (of the same name) that can then be consumed by the cluster components. The sealed-secret-controller is deployed to the cluster using the helm chart\u2026 helm repo add bitnami-sealed-secrets https://bitnami-labs.github.io/sealed-secrets helm repo update helm install --version 1.13.2 --create-namespace --namespace infra \\ eoepca-sealed-secrets bitnami-sealed-secrets/sealed-secrets Once the controller is deployed within the cluster, then the kubeseal command can be used to create a SealedSecret from a regular Secret , as follows\u2026 Create example Secret\u2026 kubectl -n test create secret generic mysecret \\ --from-literal=password=changeme \\ --dry-run=client -o yaml \\ > mysecret.yaml Create SealedSecret from Secret using kubeseal\u2026 kubeseal -o yaml \\ --controller-name eoepca-sealed-secrets \\ --controller-namespace infra \\ < mysecret.yaml \\ > mysecret-sealed.yaml","title":"Sealed Secrets"},{"location":"cluster-prerequisites/#references","text":"Sealed Secrets on GitHub kubeseal Release","title":"References"},{"location":"cluster-prerequisites/#minio-object-storage","text":"Various building blocks require access to an S3-compatible object storage service. In particular the ADES processing service expects to stage-out its processing results to S3 object storage. Ideally the cloud provider for your deployment will make available a suitable object storage service. As a workaround, in the absence of an existing object storage, it is possible to use MinIO to establish an object storage service within the Kubernetes cluster. We use the minio helm chart provided by bitnami . # Add the bitnami helm repository helm repo add bitnami https://charts.bitnami.com/bitnami helm repo update # Install the minio helm chart helm upgrade -i minio -f minio-values.yaml bitnami/minio The minio deployment is customised via the values file minio-values.yaml , for example\u2026 auth: rootUser: eoepca rootPassword: changeme ingress: enabled: true ingressClassName: nginx hostname: minio-console.192.168.49.123.nip.io apiIngress: enabled: true ingressClassName: nginx hostname: minio.192.168.49.123.nip.io persistence: storageClass: standard","title":"MinIO Object Storage"},{"location":"cluster-prerequisites/#s3cmd-configuration","text":"The s3cmd can be configured for access to the MinIO deployment. The --configure option can be used to prepare a suitable configuration file for s3cmd \u2026 s3cmd -c mys3cfg --configure In response to the prompts, the following configuration selections are applicable to the above settings\u2026 Access Key: eoepca Secret Key: changeme Default Region: us-east-1 S3 Endpoint: minio.192.168.49.123.nip.io DNS-style bucket+hostname:port template for accessing a bucket: minio.192.168.49.123.nip.io Encryption password: Path to GPG program: /usr/bin/gpg Use HTTPS protocol: False HTTP Proxy server name: HTTP Proxy server port: 0 Save the configuration file, and check access to the S3 object store with\u2026 # Create a bucket s3cmd -c mys3cfg mb s3://eoepca # List buckets s3cmd -c mys3cfg ls For example, using our sample deployment, the following can be used to interface with the MinIO service deployed in minikube\u2026 s3cmd -c local-deploy/cluster/minio/s3cfg ls","title":"s3cmd Configuration"},{"location":"cluster-prerequisites/#references_1","text":"MinIO Helm Chart MinIO Helm Chart on GitHub","title":"References"},{"location":"data-access/","text":"Data Access \u2693\ufe0e The Data Access provides standards-based services for access to platform hosted data - including OGC WMS/WMTS for visualisation, and OGC WCS for data retrieval. This component also includes Harvester and Registrar services to discover/watch the existing data holding of the infrastructure data layer and populate/maintain the data access and resource catalogue services accordingly. Helm Chart \u2693\ufe0e The Data Access is deployed via the vs (View Server) helm chart from the EOX Helm Chart Repository . The chart is configured via values that are supplied with the instantiation of the helm release. The documentation for the View Server can be found here: User Guide: https://vs.pages.eox.at/documentation/user/main/ Operator Guide: https://vs.pages.eox.at/documentation/operator/main/ helm install --values data-access-values.yaml --repo https://charts-public.hub.eox.at/ data-access vs Values \u2693\ufe0e The Data Access supports many values to configure the service. These are documented in full in the View Server - Operator Guide Configuration page . Core Configuration \u2693\ufe0e Typically, values for the following attributes may be specified to override the chart defaults: The fully-qualified public URL for the service, ref. ( global.ingress.hosts.host[0] ) Metadata describing the service instance Dynamic provisioning StorageClass for persistence Persistent Volume Claims for database and redis components Object storage details for data and cache Container images for renderer and registrar (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the Data Access will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . global: ingress: enabled: true annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: \"true\" nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" cert-manager.io/cluster-issuer: letsencrypt hosts: - host: data-access.192.168.49.123.nip.io tls: - hosts: - data-access.192.168.49.123.nip.io secretName: data-access-tls storage: data: data: type: S3 endpoint_url: http://data.cloudferro.com access_key_id: access secret_access_key: access region_name: RegionOne validate_bucket_name: false cache: type: S3 endpoint_url: \"http://minio.192.168.49.123.nip.io\" host: \"minio.192.168.49.123.nip.io\" access_key_id: xxx secret_access_key: xxx region: us-east-1 bucket: cache-bucket metadata: title: EOEPCA Data Access Service developed by EOX abstract: EOEPCA Data Access Service developed by EOX header: \"EOEPCA Data Access View Server (VS) Client powered by <a href=\\\"//eox.at\\\"><img src=\\\"//eox.at/wp-content/uploads/2017/09/EOX_Logo.svg\\\" alt=\\\"EOX\\\" style=\\\"height:25px;margin-left:10px\\\"/></a>\" url: https://data-access.192.168.49.123.nip.io/ows layers: # see section 'Data-layer Configuration' collections: # see section 'Data-layer Configuration' productTypes: # see section 'Data-layer Configuration' renderer: image: repository: eoepca/rm-data-access-core tag: \"0.9.10\" registrar: image: repository: eoepca/rm-data-access-core tag: \"0.9.10\" harvester: # see section 'Harvester Configuration' client: image: tag: release-2.0.2 database: persistence: enabled: true existingClaim: data-access-db redis: usePassword: false persistence: existingClaim: data-access-redis master: persistence: enabled: true storageClass: standard cluster: enabled: false ingestor: replicaCount: 0 preprocessor: replicaCount: 0 Data-layer Configuration \u2693\ufe0e Configuration of the service data-layer. See below for a populated sample based upon a CREODIAS infrastructure data provision. The sample helps to illustrate the values by way of a worked example, in which the following are defined: layers collections product types global: layers: - id: S2L1C title: Sentinel-2 Level 1C True Color abstract: Sentinel-2 Level 2A True Color displayColor: '#eb3700' grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__TRUE_COLOR title: Sentinel-2 Level 1C True Color abstract: Sentinel-2 Level 2A True Color grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__masked_clouds title: Sentinel-2 Level 1C True Color with cloud masks abstract: Sentinel-2 Level 1C True Color with cloud masks grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__FALSE_COLOR title: Sentinel-2 Level 1C False Color abstract: Sentinel-2 Level 1C False Color grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__NDVI title: Sentinel-2 Level 21CNDVI abstract: Sentinel-2 Level 1C NDVI grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L2A title: Sentinel-2 Level 2A True Color abstract: Sentinel-2 Level 2A True Color displayColor: '#eb3700' grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__TRUE_COLOR title: Sentinel-2 Level 2A True Color abstract: Sentinel-2 Level 2A True Color grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__masked_clouds title: Sentinel-2 Level 2A True Color with cloud masks abstract: Sentinel-2 Level 2A True Color with cloud masks grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__FALSE_COLOR title: Sentinel-2 Level 2A False Color abstract: Sentinel-2 Level 2A False Color grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__NDVI title: Sentinel-2 Level 2A NDVI abstract: Sentinel-2 Level 2A NDVI grids: - name: WGS84 zoom: 13 parentLayer: S2L2A collections: S2L1C: product_types: - S2MSI1C coverage_types: - S2L1C_B01 - S2L1C_B02 - S2L1C_B03 - S2L1C_B04 - S2L1C_B05 - S2L1C_B06 - S2L1C_B07 - S2L1C_B08 - S2L1C_B8A - S2L1C_B09 - S2L1C_B10 - S2L1C_B11 - S2L1C_B12 S2L2A: product_types: - S2MSI2A product_levels: - Level-2A coverage_types: - S2L2A_B01 - S2L2A_B02 - S2L2A_B03 - S2L2A_B04 - S2L2A_B05 - S2L2A_B06 - S2L2A_B07 - S2L2A_B08 - S2L2A_B8A - S2L2A_B09 - S2L2A_B11 - S2L2A_B12 productTypes: - name: S2MSI1C filter: s2:product_type: S2MSI1C metadata_assets: [] coverages: S2L1C_B01: assets: - B01 S2L1C_B02: assets: - B02 S2L1C_B03: assets: - B03 S2L1C_B04: assets: - B04 S2L1C_B05: assets: - B05 S2L1C_B06: assets: - B06 S2L1C_B07: assets: - B07 S2L1C_B08: assets: - B08 S2L1C_B8A: assets: - B8A S2L1C_B09: assets: - B09 S2L1C_B10: assets: - B10 S2L1C_B11: assets: - B11 S2L1C_B12: assets: - B12 defaultBrowse: TRUE_COLOR browses: TRUE_COLOR: asset: visual red: expression: B04 range: [0, 4000] nodata: 0 green: expression: B03 range: [0, 4000] nodata: 0 blue: expression: B02 range: [0, 4000] nodata: 0 FALSE_COLOR: red: expression: B08 range: [0, 4000] nodata: 0 green: expression: B04 range: [0, 4000] nodata: 0 blue: expression: B03 range: [0, 4000] nodata: 0 NDVI: grey: expression: (B08-B04)/(B08+B04) range: [-1, 1] masks: clouds: validity: false - name: S2MSI2A filter: s2:product_type: S2MSI2A metadata_assets: [] coverages: S2L2A_B01: assets: - B01 S2L2A_B02: assets: - B02 S2L2A_B03: assets: - B03 S2L2A_B04: assets: - B04 S2L2A_B05: assets: - B05 S2L2A_B06: assets: - B06 S2L2A_B07: assets: - B07 S2L2A_B08: assets: - B08 S2L2A_B8A: assets: - B8A S2L2A_B09: assets: - B09 S2L2A_B11: assets: - B11 S2L2A_B12: assets: - B12 default_browse_locator: TCI_10m browses: TRUE_COLOR: asset: visual-10m red: expression: B04 range: [0, 4000] nodata: 0 green: expression: B03 range: [0, 4000] nodata: 0 blue: expression: B02 range: [0, 4000] nodata: 0 FALSE_COLOR: red: expression: B08 range: [0, 4000] nodata: 0 green: expression: B04 range: [0, 4000] nodata: 0 blue: expression: B03 range: [0, 4000] nodata: 0 NDVI: grey: expression: (B08-B04)/(B08+B04) range: [-1, 1] masks: clouds: validity: false Harvester \u2693\ufe0e The Data Access service includes a Harvester component. The following subsections describe its configuration and usage. Harvester Helm Configuration \u2693\ufe0e The Harvester can be configured through the helm chart values\u2026 harvester: image: repository: eoepca/rm-harvester tag: 1.0.0 config: redis: host: data-access-redis-master port: 6379 harvesters: - name: Creodias-Opensearch resource: url: https://finder.creodias.eu/resto/api/collections/Sentinel2/describe.xml type: OpenSearch format_config: type: 'application/json' property_mapping: start_datetime: 'startDate' end_datetime: 'completionDate' productIdentifier: 'productIdentifier' query: time: property: sensed begin: 2019-09-10T00:00:00Z end: 2019-09-11T00:00:00Z collection: null bbox: 14.9,47.7,16.4,48.7 filter: {} postprocess: type: harvester_eoepca.postprocess.CREODIASOpenSearchSentinel2Postprocessor queue: register_queue The harvester.config.harvesters list defines a set of pre-defined harvesters which can be invoked in a later stage. The name property must be unique for each harvester and must be unique among all harvesters in the list. Each harvester is associated with a resource , an optional filter or postprocess function, and a queue . The resource defines where each item is harvested from. This can be a file system, a search service, catalog file or something similar. The example above defines a connection to an OpenSearch service on CREODIAS, with associated default query parameters and a format configuration. The filter allows to filter elements within the harvester, when the resource does not provide a specific filter. This filter can be supplied using CQL2-JSON. The postprocess can adjust the harvested results. In this example the harvested items are not complete, and additional metadata must be retrieved from an object storage. The queue defines where harvested items will be pushed into. Usually this is a registration queue, where the registrar will pick up and start registration according to its configuration. Starting the Harvester \u2693\ufe0e The harvester can either do one-off harvests via the CLI or listen on a redis queue to run consecutive harvests whenever a harvesting request is received on that queue. One-off harvests via the CLI \u2693\ufe0e In order to start a harvest from the CLI, the operator first needs to connect to the kubernetes pod of the harvester. Within that pod, the harvest can be executed like this\u2026 python3 -m harvester harvest --config-file /config-run.yaml --host data-access-redis-master --port 6379 Creodias-Opensearch This will invoke the Creodias-Opensearch harvester with default arguments. When some values are to be overridden, the \u2013values switch can be used to pass override values. These values must be a JSON string. The following example adjusts the begin and end times of the query parameters\u2026 python3 -m harvester harvest --config-file /config-run.yaml --host data-access-redis-master --port 6379 Creodias-Opensearch --values '{\"resource\": {\"query\": {\"time\": {\"begin\": \"2020-09-10T00:00:00Z\", \"end\": \"2020-09-11T00:00:00Z\"}}}}' Harvests via the harvest daemon \u2693\ufe0e The harvester pod runs a service listening on a redis queue. When a message is read from the queue, it will be read as a JSON string, expecting an object with at least a name property. Optionally, it can also have a values property, working in the same way as with CLI --values . To send a harvesting request via the redis queue, it is necessary to connect to the redis pod and execute the redis-cli there. Then the following command can be used to achieve the same result as above with CLI harvesting\u2026 redis-cli LPUSH '{\"name\": \"Creodias-Opensearch\", \"values\": {\"resource\": {\"query\": {\"time\": {\"begin\": \"2020-09-10T00:00:00Z\", \"end\": \"2020-09-11T00:00:00Z\"}}}}}' Results of the harvesting \u2693\ufe0e The harvester produces a continous stream of STAC Items which are sent down via the configured queue. It is possible that the harvested metadata is not sufficient to create a fully functional STAC Item. In this case the postprocess must transform this intermediate item to a valid STAC Item. In our example, the postprocessor looks up the Sentinel-2 product file referenced by the product identifier which is then accessed on the object storage. From the stored metadata files, the STAC Items to be sent is created. Storage \u2693\ufe0e Specification of PVCs and access to object storage. Persistent Volume Claims \u2693\ufe0e The PVCs specified in the helm chart values must be created. PVC for Database \u2693\ufe0e kind: PersistentVolumeClaim apiVersion: v1 metadata: name: data-access-db namespace: rm labels: k8s-app: data-access name: data-access spec: storageClassName: standard accessModes: - ReadWriteMany resources: requests: storage: 100Gi PVC for Redis \u2693\ufe0e kind: PersistentVolumeClaim apiVersion: v1 metadata: name: data-access-redis namespace: rm labels: k8s-app: data-access name: data-access spec: storageClassName: standard accessModes: - ReadWriteMany resources: requests: storage: 1Gi Object Storage \u2693\ufe0e The helm chart values expect specification of object storage details for: data : to access the EO data of the underlying infrastructure cache : a dedicated object storage bucket is used to support the cache function of the data access services Platform EO Data \u2693\ufe0e Specifies the details for the infrastructure object storage that provides direct access to the EO product files. For example, the CREODIAS metadata catalogue provides references to product files in their eodata object storage - the access details for which are configured in the data access services: global: storage: data: data: type: S3 endpoint_url: http://data.cloudferro.com access_key_id: access secret_access_key: access region_name: RegionOne validate_bucket_name: false Data Access Cache \u2693\ufe0e The Data Access services maintain a cache, which relies on the usage of a dedicate object storage bucket for data persistence. This bucket must be created (manual step) and its access details configured in the data access services. Example based upon CREODIAS: global: storage: cache: type: S3 endpoint_url: \"https://cf2.cloudferro.com:8080/cache-bucket\" host: \"cf2.cloudferro.com:8080\" access_key_id: xxx secret_access_key: xxx region: RegionOne bucket: cache-bucket \u2026where xxx must be replaced with the bucket credentials. Protection \u2693\ufe0e As described in section Resource Protection , the resource-guard component can be inserted into the request path of the Data Access service to provide access authorization decisions. helm install --values data-access-guard-values.yaml data-access-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the Data Access for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent ( uma-user-agent )\u2026 Example data-access-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: data-access pep: data-access-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth volumeClaim: name: eoepca-resman-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: data-access-agent nginxIntegration: enabled: true hosts: - host: data-access paths: - path: /(ows.*) service: name: data-access-vs-renderer port: 80 - path: /(opensearch.*) service: name: data-access-vs-renderer port: 80 - path: /(admin.*) service: name: data-access-vs-renderer port: 80 - path: /cache/(.*) service: name: data-access-vs-cache port: 80 - path: /(.*) service: name: data-access-vs-client port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"resman-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint Client Secret \u2693\ufe0e The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n rm create secret generic resman-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > resman-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: resman-client namespace: rm data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io. In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml Data Access Usage \u2693\ufe0e Harvesting \u2693\ufe0e The Data Access and Resource Catalogue services are configured to properly interpret harvested data via the values specified in the instantiation of the helm release. See section Data-layer Configuration . The harvesting of data can be triggered (post deployment) by connecting to the rm/harvester service and executing the command\u2026 python3 -m harvester harvest --config-file /config-run.yaml --host data-access-redis-master --port 6379 Creodias-Opensearch Additional Information \u2693\ufe0e Additional information regarding the Data Access can be found at: Helm Chart Documentation: User Guide Operator Guide Git Repository","title":"Data Access"},{"location":"data-access/#data-access","text":"The Data Access provides standards-based services for access to platform hosted data - including OGC WMS/WMTS for visualisation, and OGC WCS for data retrieval. This component also includes Harvester and Registrar services to discover/watch the existing data holding of the infrastructure data layer and populate/maintain the data access and resource catalogue services accordingly.","title":"Data Access"},{"location":"data-access/#helm-chart","text":"The Data Access is deployed via the vs (View Server) helm chart from the EOX Helm Chart Repository . The chart is configured via values that are supplied with the instantiation of the helm release. The documentation for the View Server can be found here: User Guide: https://vs.pages.eox.at/documentation/user/main/ Operator Guide: https://vs.pages.eox.at/documentation/operator/main/ helm install --values data-access-values.yaml --repo https://charts-public.hub.eox.at/ data-access vs","title":"Helm Chart"},{"location":"data-access/#values","text":"The Data Access supports many values to configure the service. These are documented in full in the View Server - Operator Guide Configuration page .","title":"Values"},{"location":"data-access/#core-configuration","text":"Typically, values for the following attributes may be specified to override the chart defaults: The fully-qualified public URL for the service, ref. ( global.ingress.hosts.host[0] ) Metadata describing the service instance Dynamic provisioning StorageClass for persistence Persistent Volume Claims for database and redis components Object storage details for data and cache Container images for renderer and registrar (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the Data Access will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . global: ingress: enabled: true annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: \"true\" nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" cert-manager.io/cluster-issuer: letsencrypt hosts: - host: data-access.192.168.49.123.nip.io tls: - hosts: - data-access.192.168.49.123.nip.io secretName: data-access-tls storage: data: data: type: S3 endpoint_url: http://data.cloudferro.com access_key_id: access secret_access_key: access region_name: RegionOne validate_bucket_name: false cache: type: S3 endpoint_url: \"http://minio.192.168.49.123.nip.io\" host: \"minio.192.168.49.123.nip.io\" access_key_id: xxx secret_access_key: xxx region: us-east-1 bucket: cache-bucket metadata: title: EOEPCA Data Access Service developed by EOX abstract: EOEPCA Data Access Service developed by EOX header: \"EOEPCA Data Access View Server (VS) Client powered by <a href=\\\"//eox.at\\\"><img src=\\\"//eox.at/wp-content/uploads/2017/09/EOX_Logo.svg\\\" alt=\\\"EOX\\\" style=\\\"height:25px;margin-left:10px\\\"/></a>\" url: https://data-access.192.168.49.123.nip.io/ows layers: # see section 'Data-layer Configuration' collections: # see section 'Data-layer Configuration' productTypes: # see section 'Data-layer Configuration' renderer: image: repository: eoepca/rm-data-access-core tag: \"0.9.10\" registrar: image: repository: eoepca/rm-data-access-core tag: \"0.9.10\" harvester: # see section 'Harvester Configuration' client: image: tag: release-2.0.2 database: persistence: enabled: true existingClaim: data-access-db redis: usePassword: false persistence: existingClaim: data-access-redis master: persistence: enabled: true storageClass: standard cluster: enabled: false ingestor: replicaCount: 0 preprocessor: replicaCount: 0","title":"Core Configuration"},{"location":"data-access/#data-layer-configuration","text":"Configuration of the service data-layer. See below for a populated sample based upon a CREODIAS infrastructure data provision. The sample helps to illustrate the values by way of a worked example, in which the following are defined: layers collections product types global: layers: - id: S2L1C title: Sentinel-2 Level 1C True Color abstract: Sentinel-2 Level 2A True Color displayColor: '#eb3700' grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__TRUE_COLOR title: Sentinel-2 Level 1C True Color abstract: Sentinel-2 Level 2A True Color grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__masked_clouds title: Sentinel-2 Level 1C True Color with cloud masks abstract: Sentinel-2 Level 1C True Color with cloud masks grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__FALSE_COLOR title: Sentinel-2 Level 1C False Color abstract: Sentinel-2 Level 1C False Color grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L1C__NDVI title: Sentinel-2 Level 21CNDVI abstract: Sentinel-2 Level 1C NDVI grids: - name: WGS84 zoom: 13 parentLayer: S2L1C - id: S2L2A title: Sentinel-2 Level 2A True Color abstract: Sentinel-2 Level 2A True Color displayColor: '#eb3700' grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__TRUE_COLOR title: Sentinel-2 Level 2A True Color abstract: Sentinel-2 Level 2A True Color grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__masked_clouds title: Sentinel-2 Level 2A True Color with cloud masks abstract: Sentinel-2 Level 2A True Color with cloud masks grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__FALSE_COLOR title: Sentinel-2 Level 2A False Color abstract: Sentinel-2 Level 2A False Color grids: - name: WGS84 zoom: 13 parentLayer: S2L2A - id: S2L2A__NDVI title: Sentinel-2 Level 2A NDVI abstract: Sentinel-2 Level 2A NDVI grids: - name: WGS84 zoom: 13 parentLayer: S2L2A collections: S2L1C: product_types: - S2MSI1C coverage_types: - S2L1C_B01 - S2L1C_B02 - S2L1C_B03 - S2L1C_B04 - S2L1C_B05 - S2L1C_B06 - S2L1C_B07 - S2L1C_B08 - S2L1C_B8A - S2L1C_B09 - S2L1C_B10 - S2L1C_B11 - S2L1C_B12 S2L2A: product_types: - S2MSI2A product_levels: - Level-2A coverage_types: - S2L2A_B01 - S2L2A_B02 - S2L2A_B03 - S2L2A_B04 - S2L2A_B05 - S2L2A_B06 - S2L2A_B07 - S2L2A_B08 - S2L2A_B8A - S2L2A_B09 - S2L2A_B11 - S2L2A_B12 productTypes: - name: S2MSI1C filter: s2:product_type: S2MSI1C metadata_assets: [] coverages: S2L1C_B01: assets: - B01 S2L1C_B02: assets: - B02 S2L1C_B03: assets: - B03 S2L1C_B04: assets: - B04 S2L1C_B05: assets: - B05 S2L1C_B06: assets: - B06 S2L1C_B07: assets: - B07 S2L1C_B08: assets: - B08 S2L1C_B8A: assets: - B8A S2L1C_B09: assets: - B09 S2L1C_B10: assets: - B10 S2L1C_B11: assets: - B11 S2L1C_B12: assets: - B12 defaultBrowse: TRUE_COLOR browses: TRUE_COLOR: asset: visual red: expression: B04 range: [0, 4000] nodata: 0 green: expression: B03 range: [0, 4000] nodata: 0 blue: expression: B02 range: [0, 4000] nodata: 0 FALSE_COLOR: red: expression: B08 range: [0, 4000] nodata: 0 green: expression: B04 range: [0, 4000] nodata: 0 blue: expression: B03 range: [0, 4000] nodata: 0 NDVI: grey: expression: (B08-B04)/(B08+B04) range: [-1, 1] masks: clouds: validity: false - name: S2MSI2A filter: s2:product_type: S2MSI2A metadata_assets: [] coverages: S2L2A_B01: assets: - B01 S2L2A_B02: assets: - B02 S2L2A_B03: assets: - B03 S2L2A_B04: assets: - B04 S2L2A_B05: assets: - B05 S2L2A_B06: assets: - B06 S2L2A_B07: assets: - B07 S2L2A_B08: assets: - B08 S2L2A_B8A: assets: - B8A S2L2A_B09: assets: - B09 S2L2A_B11: assets: - B11 S2L2A_B12: assets: - B12 default_browse_locator: TCI_10m browses: TRUE_COLOR: asset: visual-10m red: expression: B04 range: [0, 4000] nodata: 0 green: expression: B03 range: [0, 4000] nodata: 0 blue: expression: B02 range: [0, 4000] nodata: 0 FALSE_COLOR: red: expression: B08 range: [0, 4000] nodata: 0 green: expression: B04 range: [0, 4000] nodata: 0 blue: expression: B03 range: [0, 4000] nodata: 0 NDVI: grey: expression: (B08-B04)/(B08+B04) range: [-1, 1] masks: clouds: validity: false","title":"Data-layer Configuration"},{"location":"data-access/#harvester","text":"The Data Access service includes a Harvester component. The following subsections describe its configuration and usage.","title":"Harvester"},{"location":"data-access/#harvester-helm-configuration","text":"The Harvester can be configured through the helm chart values\u2026 harvester: image: repository: eoepca/rm-harvester tag: 1.0.0 config: redis: host: data-access-redis-master port: 6379 harvesters: - name: Creodias-Opensearch resource: url: https://finder.creodias.eu/resto/api/collections/Sentinel2/describe.xml type: OpenSearch format_config: type: 'application/json' property_mapping: start_datetime: 'startDate' end_datetime: 'completionDate' productIdentifier: 'productIdentifier' query: time: property: sensed begin: 2019-09-10T00:00:00Z end: 2019-09-11T00:00:00Z collection: null bbox: 14.9,47.7,16.4,48.7 filter: {} postprocess: type: harvester_eoepca.postprocess.CREODIASOpenSearchSentinel2Postprocessor queue: register_queue The harvester.config.harvesters list defines a set of pre-defined harvesters which can be invoked in a later stage. The name property must be unique for each harvester and must be unique among all harvesters in the list. Each harvester is associated with a resource , an optional filter or postprocess function, and a queue . The resource defines where each item is harvested from. This can be a file system, a search service, catalog file or something similar. The example above defines a connection to an OpenSearch service on CREODIAS, with associated default query parameters and a format configuration. The filter allows to filter elements within the harvester, when the resource does not provide a specific filter. This filter can be supplied using CQL2-JSON. The postprocess can adjust the harvested results. In this example the harvested items are not complete, and additional metadata must be retrieved from an object storage. The queue defines where harvested items will be pushed into. Usually this is a registration queue, where the registrar will pick up and start registration according to its configuration.","title":"Harvester Helm Configuration"},{"location":"data-access/#starting-the-harvester","text":"The harvester can either do one-off harvests via the CLI or listen on a redis queue to run consecutive harvests whenever a harvesting request is received on that queue.","title":"Starting the Harvester"},{"location":"data-access/#results-of-the-harvesting","text":"The harvester produces a continous stream of STAC Items which are sent down via the configured queue. It is possible that the harvested metadata is not sufficient to create a fully functional STAC Item. In this case the postprocess must transform this intermediate item to a valid STAC Item. In our example, the postprocessor looks up the Sentinel-2 product file referenced by the product identifier which is then accessed on the object storage. From the stored metadata files, the STAC Items to be sent is created.","title":"Results of the harvesting"},{"location":"data-access/#storage","text":"Specification of PVCs and access to object storage.","title":"Storage"},{"location":"data-access/#persistent-volume-claims","text":"The PVCs specified in the helm chart values must be created.","title":"Persistent Volume Claims"},{"location":"data-access/#pvc-for-database","text":"kind: PersistentVolumeClaim apiVersion: v1 metadata: name: data-access-db namespace: rm labels: k8s-app: data-access name: data-access spec: storageClassName: standard accessModes: - ReadWriteMany resources: requests: storage: 100Gi","title":"PVC for Database"},{"location":"data-access/#pvc-for-redis","text":"kind: PersistentVolumeClaim apiVersion: v1 metadata: name: data-access-redis namespace: rm labels: k8s-app: data-access name: data-access spec: storageClassName: standard accessModes: - ReadWriteMany resources: requests: storage: 1Gi","title":"PVC for Redis"},{"location":"data-access/#object-storage","text":"The helm chart values expect specification of object storage details for: data : to access the EO data of the underlying infrastructure cache : a dedicated object storage bucket is used to support the cache function of the data access services","title":"Object Storage"},{"location":"data-access/#platform-eo-data","text":"Specifies the details for the infrastructure object storage that provides direct access to the EO product files. For example, the CREODIAS metadata catalogue provides references to product files in their eodata object storage - the access details for which are configured in the data access services: global: storage: data: data: type: S3 endpoint_url: http://data.cloudferro.com access_key_id: access secret_access_key: access region_name: RegionOne validate_bucket_name: false","title":"Platform EO Data"},{"location":"data-access/#data-access-cache","text":"The Data Access services maintain a cache, which relies on the usage of a dedicate object storage bucket for data persistence. This bucket must be created (manual step) and its access details configured in the data access services. Example based upon CREODIAS: global: storage: cache: type: S3 endpoint_url: \"https://cf2.cloudferro.com:8080/cache-bucket\" host: \"cf2.cloudferro.com:8080\" access_key_id: xxx secret_access_key: xxx region: RegionOne bucket: cache-bucket \u2026where xxx must be replaced with the bucket credentials.","title":"Data Access Cache"},{"location":"data-access/#protection","text":"As described in section Resource Protection , the resource-guard component can be inserted into the request path of the Data Access service to provide access authorization decisions. helm install --values data-access-guard-values.yaml data-access-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the Data Access for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent ( uma-user-agent )\u2026 Example data-access-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: data-access pep: data-access-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth volumeClaim: name: eoepca-resman-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: data-access-agent nginxIntegration: enabled: true hosts: - host: data-access paths: - path: /(ows.*) service: name: data-access-vs-renderer port: 80 - path: /(opensearch.*) service: name: data-access-vs-renderer port: 80 - path: /(admin.*) service: name: data-access-vs-renderer port: 80 - path: /cache/(.*) service: name: data-access-vs-cache port: 80 - path: /(.*) service: name: data-access-vs-client port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"resman-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint","title":"Protection"},{"location":"data-access/#client-secret","text":"The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n rm create secret generic resman-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > resman-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: resman-client namespace: rm data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io. In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml","title":"Client Secret"},{"location":"data-access/#data-access-usage","text":"","title":"Data Access Usage"},{"location":"data-access/#harvesting","text":"The Data Access and Resource Catalogue services are configured to properly interpret harvested data via the values specified in the instantiation of the helm release. See section Data-layer Configuration . The harvesting of data can be triggered (post deployment) by connecting to the rm/harvester service and executing the command\u2026 python3 -m harvester harvest --config-file /config-run.yaml --host data-access-redis-master --port 6379 Creodias-Opensearch","title":"Harvesting"},{"location":"data-access/#additional-information","text":"Additional information regarding the Data Access can be found at: Helm Chart Documentation: User Guide Operator Guide Git Repository","title":"Additional Information"},{"location":"helm-repositories/","text":"Helm Repositories \u2693\ufe0e EOEPCA Helm Charts \u2693\ufe0e The EOEPCA building-blocks are engineered as containers for deployment to a Kubernetes cluster. Each building block defines a Helm Chart to facilitate its deployment. The EOEPCA Helm Chart Repository is configured with helm as follows\u2026 helm repo add eoepca https://eoepca.github.io/helm-charts/ Third-party Helm Charts \u2693\ufe0e In addition to the EOEPCA Helm Chart Repository, the following repositories are also relied upon, and should be configured\u2026 Cert Manager \u2693\ufe0e helm repo add jetstack https://charts.jetstack.io Nginx Ingress Controller \u2693\ufe0e helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Repo Update \u2693\ufe0e Refresh the local repo cache, after helm repo add \u2026 helm repo update","title":"Helm Repositories"},{"location":"helm-repositories/#helm-repositories","text":"","title":"Helm Repositories"},{"location":"helm-repositories/#eoepca-helm-charts","text":"The EOEPCA building-blocks are engineered as containers for deployment to a Kubernetes cluster. Each building block defines a Helm Chart to facilitate its deployment. The EOEPCA Helm Chart Repository is configured with helm as follows\u2026 helm repo add eoepca https://eoepca.github.io/helm-charts/","title":"EOEPCA Helm Charts"},{"location":"helm-repositories/#third-party-helm-charts","text":"In addition to the EOEPCA Helm Chart Repository, the following repositories are also relied upon, and should be configured\u2026","title":"Third-party Helm Charts"},{"location":"helm-repositories/#cert-manager","text":"helm repo add jetstack https://charts.jetstack.io","title":"Cert Manager"},{"location":"helm-repositories/#nginx-ingress-controller","text":"helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx","title":"Nginx Ingress Controller"},{"location":"helm-repositories/#repo-update","text":"Refresh the local repo cache, after helm repo add \u2026 helm repo update","title":"Repo Update"},{"location":"kubernetes/","text":"Kubernetes Cluster \u2693\ufe0e The EOEPCA Reference Implementation has been developed with Kubernetes as its deployment target. The system components have been developed, deployed and tested using a cluster at version v1.18.10 . Rancher Kubernetes Engine (RKE) \u2693\ufe0e The development, integration and test clusters have been established using Rancher Kubernetes Engine (RKE) at version v1.18.10 . An example of the creation of the EOEPCA Kubernetes clusters can be found on the GitHub Kubernetes Setup page . CREODIAS has been used for the development hosting infrastructure - which provides OpenStack infrastructure that is backed by Cloudferro . An example of the Terraform configurations used to automate the creation of the cloud infrastructure that underpins the RKE deployment can be found on the GitHub CREODIAS Setup page . Local Kubernetes \u2693\ufe0e To make a full deployment of the EOEPCA Reference Implementation requires a multi-node node cluster with suitable resources. For example, the development cluster comprises: 1 Master node (2 vCPU, 8 GB RAM) 5 Worker nodes (4 vCPU, 16 GB RAM) 1 NFS server (2 vCPU, 8 GB RAM) Limited local deployment can be made using a suitable local single-node kuberbetes deployment using - for example using minikube \u2026 minikube -p eoepca start --cpus max --memory max --kubernetes-version v1.21.5 minikube profile eoepca With such a deployment it is possible to deploy individual building-blocks for local development, or building-blocks in combination - within the constraints of the local host resources.","title":"Kubernetes Cluster"},{"location":"kubernetes/#kubernetes-cluster","text":"The EOEPCA Reference Implementation has been developed with Kubernetes as its deployment target. The system components have been developed, deployed and tested using a cluster at version v1.18.10 .","title":"Kubernetes Cluster"},{"location":"kubernetes/#rancher-kubernetes-engine-rke","text":"The development, integration and test clusters have been established using Rancher Kubernetes Engine (RKE) at version v1.18.10 . An example of the creation of the EOEPCA Kubernetes clusters can be found on the GitHub Kubernetes Setup page . CREODIAS has been used for the development hosting infrastructure - which provides OpenStack infrastructure that is backed by Cloudferro . An example of the Terraform configurations used to automate the creation of the cloud infrastructure that underpins the RKE deployment can be found on the GitHub CREODIAS Setup page .","title":"Rancher Kubernetes Engine (RKE)"},{"location":"kubernetes/#local-kubernetes","text":"To make a full deployment of the EOEPCA Reference Implementation requires a multi-node node cluster with suitable resources. For example, the development cluster comprises: 1 Master node (2 vCPU, 8 GB RAM) 5 Worker nodes (4 vCPU, 16 GB RAM) 1 NFS server (2 vCPU, 8 GB RAM) Limited local deployment can be made using a suitable local single-node kuberbetes deployment using - for example using minikube \u2026 minikube -p eoepca start --cpus max --memory max --kubernetes-version v1.21.5 minikube profile eoepca With such a deployment it is possible to deploy individual building-blocks for local development, or building-blocks in combination - within the constraints of the local host resources.","title":"Local Kubernetes"},{"location":"login-service/","text":"Login Service \u2693\ufe0e The Login Service provides the platform Authorization Server for authenticated user identity and request authorization. Helm Chart \u2693\ufe0e The Login Service is deployed via the login-service helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the login-service chart . helm install --values login-service-values.yaml um-login-service eoepca/login-service Values \u2693\ufe0e At minimum, values for the following attributes should be specified: Public hostname of the Authorization Server, e.g. auth.192.168.49.123.nip.io Initial password for the admin user Note that the password must meet the complexity: at least 6 characters and include one uppercase letter, one lowercase letter, one digit, and one special character IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for login-service persistence, e.g. eoepca-userman-pvc The boolen value volumeClaim.create can be used for the PVC to be created by the helm release. This creates a volume of type host-path and, hence, is only useful for single-node development usage. TLS Certificate Provider, e.g. letsencrypt-production Example login-service-values.yaml \u2026 volumeClaim: name: eoepca-userman-pvc create: false config: domain: auth.192.168.49.123.nip.io adminPass: Chang3me! ldapPass: Chang3me! volumeClaim: name: eoepca-userman-pvc opendj: volumeClaim: name: eoepca-userman-pvc oxauth: volumeClaim: name: eoepca-userman-pvc oxtrust: volumeClaim: name: eoepca-userman-pvc global: domain: auth.192.168.49.123.nip.io nginxIp: 192.168.49.123 nginx: ingress: annotations: cert-manager.io/cluster-issuer: letsencrypt-production hosts: - auth.192.168.49.123.nip.io tls: - hosts: - auth.192.168.49.123.nip.io secretName: login-service-tls Login Service Usage \u2693\ufe0e Once the deployment has been completed successfully, the Login Service is accessed at the endpoint https://auth.<domain>/ , configured by your domain - e.g. https://auth.192.168.49.123.nip.io/ . Login as the admin user with the credentials configured in the helm values - ref. adminPass / ldapPass . Typical first actions to undertake through the Gluu web interface include creation of users and clients. Additional Information \u2693\ufe0e Additional information regarding the Login Service can be found at: Helm Chart Wiki GitHub Repository","title":"Login Service"},{"location":"login-service/#login-service","text":"The Login Service provides the platform Authorization Server for authenticated user identity and request authorization.","title":"Login Service"},{"location":"login-service/#helm-chart","text":"The Login Service is deployed via the login-service helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the login-service chart . helm install --values login-service-values.yaml um-login-service eoepca/login-service","title":"Helm Chart"},{"location":"login-service/#values","text":"At minimum, values for the following attributes should be specified: Public hostname of the Authorization Server, e.g. auth.192.168.49.123.nip.io Initial password for the admin user Note that the password must meet the complexity: at least 6 characters and include one uppercase letter, one lowercase letter, one digit, and one special character IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for login-service persistence, e.g. eoepca-userman-pvc The boolen value volumeClaim.create can be used for the PVC to be created by the helm release. This creates a volume of type host-path and, hence, is only useful for single-node development usage. TLS Certificate Provider, e.g. letsencrypt-production Example login-service-values.yaml \u2026 volumeClaim: name: eoepca-userman-pvc create: false config: domain: auth.192.168.49.123.nip.io adminPass: Chang3me! ldapPass: Chang3me! volumeClaim: name: eoepca-userman-pvc opendj: volumeClaim: name: eoepca-userman-pvc oxauth: volumeClaim: name: eoepca-userman-pvc oxtrust: volumeClaim: name: eoepca-userman-pvc global: domain: auth.192.168.49.123.nip.io nginxIp: 192.168.49.123 nginx: ingress: annotations: cert-manager.io/cluster-issuer: letsencrypt-production hosts: - auth.192.168.49.123.nip.io tls: - hosts: - auth.192.168.49.123.nip.io secretName: login-service-tls","title":"Values"},{"location":"login-service/#login-service-usage","text":"Once the deployment has been completed successfully, the Login Service is accessed at the endpoint https://auth.<domain>/ , configured by your domain - e.g. https://auth.192.168.49.123.nip.io/ . Login as the admin user with the credentials configured in the helm values - ref. adminPass / ldapPass . Typical first actions to undertake through the Gluu web interface include creation of users and clients.","title":"Login Service Usage"},{"location":"login-service/#additional-information","text":"Additional information regarding the Login Service can be found at: Helm Chart Wiki GitHub Repository","title":"Additional Information"},{"location":"pdp/","text":"Policy Decision Point \u2693\ufe0e The Policy Decision Point (PDP) provides the platform policy database and associated service for access policy decision requests. Helm Chart \u2693\ufe0e The PDP is deployed via the pdp-engine helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the pdp-engine chart . helm install --values pdp-values.yaml pdp eoepca/pdp-engine Values \u2693\ufe0e At minimum, values for the following attributes should be specified: Public hostname of the Authorization Server, e.g. auth.192.168.49.123.nip.io IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for pdp-engine persistence, e.g. eoepca-userman-pvc The boolen value volumeClaim.create can be used for the PVC to be created by the helm release. This creates a volume of type host-path and, hence, is only useful for single-node development usage. Example pdp-values.yaml \u2026 global: nginxIp: 192.168.49.123 domain: auth.192.168.49.123.nip.io volumeClaim: name: eoepca-userman-pvc create: false Additional Information \u2693\ufe0e Additional information regarding the PDP can be found at: Helm Chart Wiki GitHub Repository","title":"Policy Decision Point"},{"location":"pdp/#policy-decision-point","text":"The Policy Decision Point (PDP) provides the platform policy database and associated service for access policy decision requests.","title":"Policy Decision Point"},{"location":"pdp/#helm-chart","text":"The PDP is deployed via the pdp-engine helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the pdp-engine chart . helm install --values pdp-values.yaml pdp eoepca/pdp-engine","title":"Helm Chart"},{"location":"pdp/#values","text":"At minimum, values for the following attributes should be specified: Public hostname of the Authorization Server, e.g. auth.192.168.49.123.nip.io IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for pdp-engine persistence, e.g. eoepca-userman-pvc The boolen value volumeClaim.create can be used for the PVC to be created by the helm release. This creates a volume of type host-path and, hence, is only useful for single-node development usage. Example pdp-values.yaml \u2026 global: nginxIp: 192.168.49.123 domain: auth.192.168.49.123.nip.io volumeClaim: name: eoepca-userman-pvc create: false","title":"Values"},{"location":"pdp/#additional-information","text":"Additional information regarding the PDP can be found at: Helm Chart Wiki GitHub Repository","title":"Additional Information"},{"location":"persistence/","text":"Persistence \u2693\ufe0e The EOEPCA building-blocks rely upon Kubernetes Persistent Volumes for their component persistence. Components integrate with the storage provided in the cluster by means of configurable Persistent Volume Claims and/or dynamic Storage Class that are specfied as values at time of deployment. Some components require storage of type ReadWriteMany - which, for a multi-node cluster, implies a network-based storage solution. ReadWriteMany Storage \u2693\ufe0e For the EOEPCA development deployment, an NFS server has been established to provide the persistence layer for ReadWriteMany storage. Pre-defined Persistent Volume Claims \u2693\ufe0e The EOEPCA development deployment establishes the following pre-defined Persistent Volume Claims, to provide a simple storage architecture that is organised around the \u2018domain areas\u2019 into which the Reference Implementation is split. Resource Managment ( resman ) Creates persistentvolume/eoepca-resman-pv and persistentvolumeclaim/eoepca-resman-pvc . Processing & Chaining ( proc ) Creates persistentvolume/eoepca-proc-pv and persistentvolumeclaim/eoepca-proc-pvc . User Management ( userman ) Creates persistentvolume/eoepca-userman-pv and persistentvolumeclaim/eoepca-userman-pvc . NOTE that this is offered only as an example thay suits the approach of the development team. Each building-block has configuration through which its persistence (PV/PVC) can be configured according the needs of the deployment. The \u2018domain-area-based\u2019 approach is acheived through the storage helm chart , with the following typical configuration\u2026 host: enabled: false nfs: enabled: true storageClass: eoepca-nfs server: address: \"<your-nfs-ip-address-here>\" domain: resman: enabled: true storageClass: eoepca-nfs proc: enabled: true storageClass: eoepca-nfs userman: enabled: true storageClass: eoepca-nfs Once established, these PV/PVCs are then referenced within the deployment configurations of the building-blocks. Dynamic ReadWriteMany Storage Provisioning \u2693\ufe0e In addition to the pre-defined PV/PVCs, the EOEPCA Reference Implementation also defines NFS-based storage classes for dynamic storage provisioning: managed-nfs-storage With a Reclaim Policy of Delete . managed-nfs-storage-retain With a Reclaim Policy of Retain . The building-blocks simply reference the required Storage Class in their volume specifications, to receive a Persistent Volume Claim that is dynamically provisioned at deployment time. This is acheived through the nfs-provisioner helm chart , with the following typical configurations\u2026 Reclaim Policy Delete \u2026 provisionerName: nfs-storage storageClass: name: managed-nfs-storage create: true reclaimPolicy: Delete archiveOnDelete: false allowVolumeExpansion: true nfs: server: \"<your-nfs-ip-address-here>\" path: /data/dynamic # your NFS server path here Reclaim Policy Retain \u2026 provisionerName: nfs-storage-retain storageClass: name: managed-nfs-storage-retain create: true reclaimPolicy: Retain allowVolumeExpansion: true nfs: server: \"<your-nfs-ip-address-here>\" path: /data/dynamic # your NFS server path here Clustered Storage Solutions \u2693\ufe0e Clustered storage approaches offer an alternative to NFS. Clustered Storage provides a network-attached storage through a set of commodity hosts whose storage is aggregated to form a distributed file-system. Capacity is scaled by adding additional nodes or adding additional storage to the existing nodes. In the context of a multi-node Kubernetes cluster, then it is typical that the same commodity nodes provide both the cluster members and storage resources, i.e. the clustered storage is spread across the Kubernetes worker nodes. Candidate clustered storage solutions include: GlusterFS GlusterFS is deployed as an operating system service across each node participating in the storage solution. Thus, with GlusterFS, the distributed storage nodes do not need to be one-and-the-same with the compute (cluster) nodes \u2013 although this may preferably be the case. Longhorn Longhorn offers a solution that is similar to that of GlusterFS, except that Longhorn is \u2018cloud-native\u2019 in that its service layer deploys within the Kubernetes cluster itself. Thus, the storage nodes are also the cluster compute nodes by design. All things being equal, Longhorn is recommended as the best approach for Kubernetes clusters. Local Cluster Storage \u2693\ufe0e For the purposes of the EOEPCA deployment, the default Storage Class included with the local Kubernetes distribution can be used for all storage concerns - e.g. standard for minikube which provides the ReadWriteMany persistence that is required by the ADES.","title":"Persistence"},{"location":"persistence/#persistence","text":"The EOEPCA building-blocks rely upon Kubernetes Persistent Volumes for their component persistence. Components integrate with the storage provided in the cluster by means of configurable Persistent Volume Claims and/or dynamic Storage Class that are specfied as values at time of deployment. Some components require storage of type ReadWriteMany - which, for a multi-node cluster, implies a network-based storage solution.","title":"Persistence"},{"location":"persistence/#readwritemany-storage","text":"For the EOEPCA development deployment, an NFS server has been established to provide the persistence layer for ReadWriteMany storage.","title":"ReadWriteMany Storage"},{"location":"persistence/#pre-defined-persistent-volume-claims","text":"The EOEPCA development deployment establishes the following pre-defined Persistent Volume Claims, to provide a simple storage architecture that is organised around the \u2018domain areas\u2019 into which the Reference Implementation is split. Resource Managment ( resman ) Creates persistentvolume/eoepca-resman-pv and persistentvolumeclaim/eoepca-resman-pvc . Processing & Chaining ( proc ) Creates persistentvolume/eoepca-proc-pv and persistentvolumeclaim/eoepca-proc-pvc . User Management ( userman ) Creates persistentvolume/eoepca-userman-pv and persistentvolumeclaim/eoepca-userman-pvc . NOTE that this is offered only as an example thay suits the approach of the development team. Each building-block has configuration through which its persistence (PV/PVC) can be configured according the needs of the deployment. The \u2018domain-area-based\u2019 approach is acheived through the storage helm chart , with the following typical configuration\u2026 host: enabled: false nfs: enabled: true storageClass: eoepca-nfs server: address: \"<your-nfs-ip-address-here>\" domain: resman: enabled: true storageClass: eoepca-nfs proc: enabled: true storageClass: eoepca-nfs userman: enabled: true storageClass: eoepca-nfs Once established, these PV/PVCs are then referenced within the deployment configurations of the building-blocks.","title":"Pre-defined Persistent Volume Claims"},{"location":"persistence/#dynamic-readwritemany-storage-provisioning","text":"In addition to the pre-defined PV/PVCs, the EOEPCA Reference Implementation also defines NFS-based storage classes for dynamic storage provisioning: managed-nfs-storage With a Reclaim Policy of Delete . managed-nfs-storage-retain With a Reclaim Policy of Retain . The building-blocks simply reference the required Storage Class in their volume specifications, to receive a Persistent Volume Claim that is dynamically provisioned at deployment time. This is acheived through the nfs-provisioner helm chart , with the following typical configurations\u2026 Reclaim Policy Delete \u2026 provisionerName: nfs-storage storageClass: name: managed-nfs-storage create: true reclaimPolicy: Delete archiveOnDelete: false allowVolumeExpansion: true nfs: server: \"<your-nfs-ip-address-here>\" path: /data/dynamic # your NFS server path here Reclaim Policy Retain \u2026 provisionerName: nfs-storage-retain storageClass: name: managed-nfs-storage-retain create: true reclaimPolicy: Retain allowVolumeExpansion: true nfs: server: \"<your-nfs-ip-address-here>\" path: /data/dynamic # your NFS server path here","title":"Dynamic ReadWriteMany Storage Provisioning"},{"location":"persistence/#clustered-storage-solutions","text":"Clustered storage approaches offer an alternative to NFS. Clustered Storage provides a network-attached storage through a set of commodity hosts whose storage is aggregated to form a distributed file-system. Capacity is scaled by adding additional nodes or adding additional storage to the existing nodes. In the context of a multi-node Kubernetes cluster, then it is typical that the same commodity nodes provide both the cluster members and storage resources, i.e. the clustered storage is spread across the Kubernetes worker nodes. Candidate clustered storage solutions include: GlusterFS GlusterFS is deployed as an operating system service across each node participating in the storage solution. Thus, with GlusterFS, the distributed storage nodes do not need to be one-and-the-same with the compute (cluster) nodes \u2013 although this may preferably be the case. Longhorn Longhorn offers a solution that is similar to that of GlusterFS, except that Longhorn is \u2018cloud-native\u2019 in that its service layer deploys within the Kubernetes cluster itself. Thus, the storage nodes are also the cluster compute nodes by design. All things being equal, Longhorn is recommended as the best approach for Kubernetes clusters.","title":"Clustered Storage Solutions"},{"location":"persistence/#local-cluster-storage","text":"For the purposes of the EOEPCA deployment, the default Storage Class included with the local Kubernetes distribution can be used for all storage concerns - e.g. standard for minikube which provides the ReadWriteMany persistence that is required by the ADES.","title":"Local Cluster Storage"},{"location":"prerequisite-tooling/","text":"Prerequisite Tooling \u2693\ufe0e There are some standard tools referenced in this guide. These are detailed in the following subsections. docker \u2693\ufe0e Docker faciliates the creation, management and execution of containers. Whilst not strictly necessary to support deployment to an existing/managed Kubernetes cluster, it can nevertheless be useful to have local access to the docker tooling. For example, if minikube is used to follow this guide using a local k8s cluster, then this is best achieved using minikube\u2019s docker driver. Docker is most easily installed with\u2026 curl -fsSL https://get.docker.com | sh For convenience, add your user to the docker group\u2026 sudo usermod -aG docker ${USER} Logout/in to refresh your session\u2019s group permissions. kubectl \u2693\ufe0e Kubectl is the main tool for interaction with a Kubernetes cluster. The latest version can be installed with\u2026 mkdir -p $HOME/.local/bin \\ && curl -fsSLo $HOME/.local/bin/kubectl \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" \\ && chmod +x $HOME/.local/bin/kubectl See the official kubectl installation documentation for more installation options. helm \u2693\ufe0e Helm is the Kubernetes package manager, in which components are deployed to a Kubernetes cluster via helm charts. The helm charts are instantiated for deployment via \u2018values\u2019 that configure the chart templates. The latest helm version can be installed with\u2026 export HELM_INSTALL_DIR=\"$HOME/.local/bin\" \\ && curl -sfL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash See the official helm installation documentation for more installation options. minikube \u2693\ufe0e Minikube is a tool that allows to create a local (single-node) Kubernetes cluster for development/testing. It is not designed for production use. In the absence of access to a \u2018full\u2019 Kubernetes cluster, this guide can be followed using minikube. The latest version of minikube can be installed with\u2026 mkdir -p $HOME/.local/bin \\ && curl -fsSLo $HOME/.local/bin/minikube \"https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\" \\ && chmod +x $HOME/.local/bin/minikube See the official minikube installation documentation for more installation options.","title":"Prerequisite Tooling"},{"location":"prerequisite-tooling/#prerequisite-tooling","text":"There are some standard tools referenced in this guide. These are detailed in the following subsections.","title":"Prerequisite Tooling"},{"location":"prerequisite-tooling/#docker","text":"Docker faciliates the creation, management and execution of containers. Whilst not strictly necessary to support deployment to an existing/managed Kubernetes cluster, it can nevertheless be useful to have local access to the docker tooling. For example, if minikube is used to follow this guide using a local k8s cluster, then this is best achieved using minikube\u2019s docker driver. Docker is most easily installed with\u2026 curl -fsSL https://get.docker.com | sh For convenience, add your user to the docker group\u2026 sudo usermod -aG docker ${USER} Logout/in to refresh your session\u2019s group permissions.","title":"docker"},{"location":"prerequisite-tooling/#kubectl","text":"Kubectl is the main tool for interaction with a Kubernetes cluster. The latest version can be installed with\u2026 mkdir -p $HOME/.local/bin \\ && curl -fsSLo $HOME/.local/bin/kubectl \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" \\ && chmod +x $HOME/.local/bin/kubectl See the official kubectl installation documentation for more installation options.","title":"kubectl"},{"location":"prerequisite-tooling/#helm","text":"Helm is the Kubernetes package manager, in which components are deployed to a Kubernetes cluster via helm charts. The helm charts are instantiated for deployment via \u2018values\u2019 that configure the chart templates. The latest helm version can be installed with\u2026 export HELM_INSTALL_DIR=\"$HOME/.local/bin\" \\ && curl -sfL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash See the official helm installation documentation for more installation options.","title":"helm"},{"location":"prerequisite-tooling/#minikube","text":"Minikube is a tool that allows to create a local (single-node) Kubernetes cluster for development/testing. It is not designed for production use. In the absence of access to a \u2018full\u2019 Kubernetes cluster, this guide can be followed using minikube. The latest version of minikube can be installed with\u2026 mkdir -p $HOME/.local/bin \\ && curl -fsSLo $HOME/.local/bin/minikube \"https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\" \\ && chmod +x $HOME/.local/bin/minikube See the official minikube installation documentation for more installation options.","title":"minikube"},{"location":"resource-catalogue/","text":"Resource Catalogue \u2693\ufe0e The Resource Catalogue provides a standards-based EO metadata catalogue that includes support for OGC CSW / API Records, STAC and OpenSearch. Helm Chart \u2693\ufe0e The Resource Catalogue is deployed via the rm-resource-catalogue helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the rm-resource-catalogue chart . helm install --values resource-catalogue-values.yaml ades eoepca/rm-resource-catalogue Values \u2693\ufe0e The Resource Catalogue supports many values to configure the service - as described in the Values section of the chart README . Typically, values for the following attributes may be specified: The fully-qualified public URL for the service Dynamic provisioning StorageClass for database persistence (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the Resource Catalogue will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . Metadata describing the Catalogue instance Example resource-catalogue-values.yaml \u2026 global: namespace: rm ingress: enabled: true name: resource-catalogue host: resource-catalogue.192.168.49.123.nip.io tls_host: resource-catalogue.192.168.49.123.nip.io tls_secret_name: resource-catalogue-tls db: volume_storage_type: standard pycsw: # image: # pullPolicy: Always # tag: \"eoepca-0.9.0\" config: server: url: https://resource-catalogue.192.168.49.123.nip.io/ Protection \u2693\ufe0e As described in section Resource Protection , the resource-guard component can be inserted into the request path of the Resource Catalogue service to provide access authorization decisions helm install --values resource-catalogue-guard-values.yaml resource-catalogue-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the Resource Catalogue for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent ( uma-user-agent )\u2026 Example resource-catalogue-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: resource-catalogue pep: resource-catalogue-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth volumeClaim: name: eoepca-resman-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: resource-catalogue-agent nginxIntegration: enabled: true hosts: - host: resource-catalogue paths: - path: /(.*) service: name: resource-catalogue-service port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"resman-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint Client Secret \u2693\ufe0e The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n rm create secret generic resman-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > resman-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: resman-client namespace: rm data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io . In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml Resource Catalogue Usage \u2693\ufe0e The Resource Catalogue is initially populated during the initialisation of the Data Access service. See section Data-layer Configuration . The Resource Catalogue is accessed at the endpoint https://resource-catalogue.<domain>/ , configured by your domain - e.g. https://resource-catalogue.192.168.49.123.nip.io/ . Additional Information \u2693\ufe0e Additional information regarding the Resource Catalogue can be found at: Helm Chart Docs GitHub Repository","title":"Resource Catalogue"},{"location":"resource-catalogue/#resource-catalogue","text":"The Resource Catalogue provides a standards-based EO metadata catalogue that includes support for OGC CSW / API Records, STAC and OpenSearch.","title":"Resource Catalogue"},{"location":"resource-catalogue/#helm-chart","text":"The Resource Catalogue is deployed via the rm-resource-catalogue helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the rm-resource-catalogue chart . helm install --values resource-catalogue-values.yaml ades eoepca/rm-resource-catalogue","title":"Helm Chart"},{"location":"resource-catalogue/#values","text":"The Resource Catalogue supports many values to configure the service - as described in the Values section of the chart README . Typically, values for the following attributes may be specified: The fully-qualified public URL for the service Dynamic provisioning StorageClass for database persistence (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the Resource Catalogue will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . Metadata describing the Catalogue instance Example resource-catalogue-values.yaml \u2026 global: namespace: rm ingress: enabled: true name: resource-catalogue host: resource-catalogue.192.168.49.123.nip.io tls_host: resource-catalogue.192.168.49.123.nip.io tls_secret_name: resource-catalogue-tls db: volume_storage_type: standard pycsw: # image: # pullPolicy: Always # tag: \"eoepca-0.9.0\" config: server: url: https://resource-catalogue.192.168.49.123.nip.io/","title":"Values"},{"location":"resource-catalogue/#protection","text":"As described in section Resource Protection , the resource-guard component can be inserted into the request path of the Resource Catalogue service to provide access authorization decisions helm install --values resource-catalogue-guard-values.yaml resource-catalogue-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the Resource Catalogue for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent ( uma-user-agent )\u2026 Example resource-catalogue-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: resource-catalogue pep: resource-catalogue-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth volumeClaim: name: eoepca-resman-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: resource-catalogue-agent nginxIntegration: enabled: true hosts: - host: resource-catalogue paths: - path: /(.*) service: name: resource-catalogue-service port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"resman-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint","title":"Protection"},{"location":"resource-catalogue/#client-secret","text":"The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n rm create secret generic resman-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > resman-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: resman-client namespace: rm data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io . In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml","title":"Client Secret"},{"location":"resource-catalogue/#resource-catalogue-usage","text":"The Resource Catalogue is initially populated during the initialisation of the Data Access service. See section Data-layer Configuration . The Resource Catalogue is accessed at the endpoint https://resource-catalogue.<domain>/ , configured by your domain - e.g. https://resource-catalogue.192.168.49.123.nip.io/ .","title":"Resource Catalogue Usage"},{"location":"resource-catalogue/#additional-information","text":"Additional information regarding the Resource Catalogue can be found at: Helm Chart Docs GitHub Repository","title":"Additional Information"},{"location":"resource-protection/","text":"Resource Protection \u2693\ufe0e EOEPCA defines Building Blocks within a micro-service architecture. The services are subject to protection within an Identity and Access Management (IAM) approach that includes: Login Service (Authorization Server) Policy Decision Point (PDP) Policy Enforcement Point (PEP) Building Blocks that act as a Resource Server are individually protected by a Policy Enforcement Point (PEP). The PEP enforces the authorization decision in collaboration with the Login Service and Policy Decision Point (PDP). The PEP expects to interface to a client (user agent, e.g. browser) using User Managed Access (UMA) flows. It is not typical for a client to support UMA flows , and so the PEP can be deployed with a companion UMA User Agent component that interfaces between the client and the PEP, and performs the UMA Flow on behalf of the client. The Resource Guard is a \u2018convenience\u2019 component that deploys the PEP & UMA User Agent as a cooperating pair. The Resource Guard \u2018inserts itself\u2019 into the request path of the target Resource Server using the auth_request facility offered by Nginx. Thus, the Resource Guard deploys with an Ingress specification that: Configures the auth_request module to defer access authorization to the uma-user-agent service Configures the ingress rules (host/path) for the target Resource Server Helm Chart \u2693\ufe0e The Resource Guard is deployed via the resource-guard helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the resource-guard chart . It is expected to deploy multiple instances of the Resource Guard chart, one for each Resource Server to be protected. helm install --values myservice-guard-values.yaml myservice-guard eoepca/resource-guard Values \u2693\ufe0e The helm chart is deployed with values that are passed through to the subcharts for the pep-engine and uma-user-agent . Typical values to be specified include: Host/domain details for the Login Service and PDP, e.g. auth.192.168.49.123.nip.io IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for pep-engine persistence, e.g. myservice-pep-pvc TLS Certificate Provider, e.g. letsencrypt-production Optional specification of default resources with which to initialise the policy database for the component Ingress rules definition for reverse-proxy to the target Resource Server Name of Secret that contains the client credentials used by the uma-user-agent to interface with the Login Service. See section Client Secret below Example myservice-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: myservice pep: myservice-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-production #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: workingMode: PARTIAL asHostname: auth pdpHostname: auth customDefaultResources: - name: \"Eric's space\" description: \"Protected Access for eric to his space in myservice\" resource_uri: \"/ericspace\" scopes: [] default_owner: \"d3688daa-385d-45b0-8e04-2062e3e2cd86\" nginxIntegration: enabled: false volumeClaim: name: myservice-pep-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: myservice-agent nginxIntegration: enabled: true hosts: - host: myservice paths: - path: /(.*) service: name: myservice port: 80 - path: /(doc.*) service: name: myservice-docs port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"myservice-agent\" logging: level: \"debug\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' #--------------------------------------------------------------------------- # END values #--------------------------------------------------------------------------- Client Credentials \u2693\ufe0e The uma-user-agent requires Client Credentials for its interactions with the login-service . The uma-user-agent expects to read these credentials from the file client.yaml , in the form\u2026 client-id: <my-client-id> client-secret: <my-secret> Client Registration \u2693\ufe0e To obtain the Client Credentials required by the uma-user-agent it is necessary to register a client with the login-service , or use the credentials for an existing client. A helper script is provided to register a basic client and obtain the required credentials. The script is available in the deployment-guide repository , and can be obtained as follows\u2026 git clone git@github.com:EOEPCA/deployment-guide cd deployment-guide The register-client helper script requires some command-line arguments\u2026 Usage: register_client <authorization-server-hostname> <client-name> [<output-file>] For example\u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io myclient INFO: Preparing docker image... [done] Client successfully registered. Make a note of the credentials: client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 The script can optionally write the client credentials to an output file - in the expected configuration file format\u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io myclient client.yaml \u2026writes the client credentials to the file client.yaml . NOTE that the register-client helper relies upon docker to build and run the script. Client Secret \u2693\ufe0e The client.yaml configuration file is made available via a Kubernetes Secret\u2026 kubectl -n myservice-ns create secret generic myservice-agent \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > myservice-agent-secret.yaml apiVersion: v1 kind: Secret metadata: name: myservice-agent namespace: myservice-ns data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The resource-guard deployment is configured with the name of the Secret through the helm chart value client.credentialsSecretName . User ID Token \u2693\ufe0e As described in the README for the Resource Guard , it is necessary for a request to a protected resource to provide the User ID Token in the request header. In the simple case of a user with username/password held within the Login Service, the User ID Token can be obtained as follows: curl --location --request POST 'https://auth.192.168.49.123.nip.io/oxauth/restv1/token' \\ --header 'Cache-Control: no-cache' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'scope=openid user_name is_operator' \\ --data-urlencode 'grant_type=password' \\ --data-urlencode 'username=<username>' \\ --data-urlencode 'password=<password>' \\ --data-urlencode 'client_id=<client-id>' \\ --data-urlencode 'client_secret=<client-password>' The User ID Token is included in the id_token field of the json response. Additional Information \u2693\ufe0e Additional information regarding the Resource Guard can be found at: Helm Chart README GitHub Repository: pep-engine uma-user-agent","title":"Resource Protection"},{"location":"resource-protection/#resource-protection","text":"EOEPCA defines Building Blocks within a micro-service architecture. The services are subject to protection within an Identity and Access Management (IAM) approach that includes: Login Service (Authorization Server) Policy Decision Point (PDP) Policy Enforcement Point (PEP) Building Blocks that act as a Resource Server are individually protected by a Policy Enforcement Point (PEP). The PEP enforces the authorization decision in collaboration with the Login Service and Policy Decision Point (PDP). The PEP expects to interface to a client (user agent, e.g. browser) using User Managed Access (UMA) flows. It is not typical for a client to support UMA flows , and so the PEP can be deployed with a companion UMA User Agent component that interfaces between the client and the PEP, and performs the UMA Flow on behalf of the client. The Resource Guard is a \u2018convenience\u2019 component that deploys the PEP & UMA User Agent as a cooperating pair. The Resource Guard \u2018inserts itself\u2019 into the request path of the target Resource Server using the auth_request facility offered by Nginx. Thus, the Resource Guard deploys with an Ingress specification that: Configures the auth_request module to defer access authorization to the uma-user-agent service Configures the ingress rules (host/path) for the target Resource Server","title":"Resource Protection"},{"location":"resource-protection/#helm-chart","text":"The Resource Guard is deployed via the resource-guard helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the resource-guard chart . It is expected to deploy multiple instances of the Resource Guard chart, one for each Resource Server to be protected. helm install --values myservice-guard-values.yaml myservice-guard eoepca/resource-guard","title":"Helm Chart"},{"location":"resource-protection/#values","text":"The helm chart is deployed with values that are passed through to the subcharts for the pep-engine and uma-user-agent . Typical values to be specified include: Host/domain details for the Login Service and PDP, e.g. auth.192.168.49.123.nip.io IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for pep-engine persistence, e.g. myservice-pep-pvc TLS Certificate Provider, e.g. letsencrypt-production Optional specification of default resources with which to initialise the policy database for the component Ingress rules definition for reverse-proxy to the target Resource Server Name of Secret that contains the client credentials used by the uma-user-agent to interface with the Login Service. See section Client Secret below Example myservice-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: myservice pep: myservice-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-production #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: workingMode: PARTIAL asHostname: auth pdpHostname: auth customDefaultResources: - name: \"Eric's space\" description: \"Protected Access for eric to his space in myservice\" resource_uri: \"/ericspace\" scopes: [] default_owner: \"d3688daa-385d-45b0-8e04-2062e3e2cd86\" nginxIntegration: enabled: false volumeClaim: name: myservice-pep-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: myservice-agent nginxIntegration: enabled: true hosts: - host: myservice paths: - path: /(.*) service: name: myservice port: 80 - path: /(doc.*) service: name: myservice-docs port: 80 annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"myservice-agent\" logging: level: \"debug\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' #--------------------------------------------------------------------------- # END values #---------------------------------------------------------------------------","title":"Values"},{"location":"resource-protection/#client-credentials","text":"The uma-user-agent requires Client Credentials for its interactions with the login-service . The uma-user-agent expects to read these credentials from the file client.yaml , in the form\u2026 client-id: <my-client-id> client-secret: <my-secret>","title":"Client Credentials"},{"location":"resource-protection/#client-registration","text":"To obtain the Client Credentials required by the uma-user-agent it is necessary to register a client with the login-service , or use the credentials for an existing client. A helper script is provided to register a basic client and obtain the required credentials. The script is available in the deployment-guide repository , and can be obtained as follows\u2026 git clone git@github.com:EOEPCA/deployment-guide cd deployment-guide The register-client helper script requires some command-line arguments\u2026 Usage: register_client <authorization-server-hostname> <client-name> [<output-file>] For example\u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io myclient INFO: Preparing docker image... [done] Client successfully registered. Make a note of the credentials: client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 The script can optionally write the client credentials to an output file - in the expected configuration file format\u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io myclient client.yaml \u2026writes the client credentials to the file client.yaml . NOTE that the register-client helper relies upon docker to build and run the script.","title":"Client Registration"},{"location":"resource-protection/#client-secret","text":"The client.yaml configuration file is made available via a Kubernetes Secret\u2026 kubectl -n myservice-ns create secret generic myservice-agent \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > myservice-agent-secret.yaml apiVersion: v1 kind: Secret metadata: name: myservice-agent namespace: myservice-ns data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The resource-guard deployment is configured with the name of the Secret through the helm chart value client.credentialsSecretName .","title":"Client Secret"},{"location":"resource-protection/#user-id-token","text":"As described in the README for the Resource Guard , it is necessary for a request to a protected resource to provide the User ID Token in the request header. In the simple case of a user with username/password held within the Login Service, the User ID Token can be obtained as follows: curl --location --request POST 'https://auth.192.168.49.123.nip.io/oxauth/restv1/token' \\ --header 'Cache-Control: no-cache' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'scope=openid user_name is_operator' \\ --data-urlencode 'grant_type=password' \\ --data-urlencode 'username=<username>' \\ --data-urlencode 'password=<password>' \\ --data-urlencode 'client_id=<client-id>' \\ --data-urlencode 'client_secret=<client-password>' The User ID Token is included in the id_token field of the json response.","title":"User ID Token"},{"location":"resource-protection/#additional-information","text":"Additional information regarding the Resource Guard can be found at: Helm Chart README GitHub Repository: pep-engine uma-user-agent","title":"Additional Information"},{"location":"user-profile/","text":"User Profile \u2693\ufe0e The User Profile represents the user\u2019s \u2018account\u2019 within the platform. Helm Chart \u2693\ufe0e The User Profile is deployed via the user-profile helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the user-profile chart . helm install --values user-profile-values.yaml um-user-profile eoepca/user-profile Values \u2693\ufe0e At minimum, values for the following attributes should be specified: Public hostname of the Authorization Server, e.g. auth.192.168.49.123.nip.io IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for user-profile persistence, e.g. eoepca-userman-pvc The boolen value volumeClaim.create can be used for the PVC to be created by the helm release. This creates a volume of type host-path and, hence, is only useful for single-node development usage. Example user-profile-values.yaml \u2026 global: domain: auth.192.168.49.123.nip.io nginxIp: 192.168.49.123 volumeClaim: name: eoepca-userman-pvc create: false User Profile Usage \u2693\ufe0e The User Profile is accessed through the /web_ui path of the Login Service, e.g. http://auth.kube.guide.eoepca.org/web_ui. Additional Information \u2693\ufe0e Additional information regarding the User Profile can be found at: Helm Chart Wiki GitHub Repository","title":"User Profile"},{"location":"user-profile/#user-profile","text":"The User Profile represents the user\u2019s \u2018account\u2019 within the platform.","title":"User Profile"},{"location":"user-profile/#helm-chart","text":"The User Profile is deployed via the user-profile helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the user-profile chart . helm install --values user-profile-values.yaml um-user-profile eoepca/user-profile","title":"Helm Chart"},{"location":"user-profile/#values","text":"At minimum, values for the following attributes should be specified: Public hostname of the Authorization Server, e.g. auth.192.168.49.123.nip.io IP Address of the public facing reverse proxy (Nginx Ingress Controller), e.g. 192.168.49.123 Name of Persistent Volume Claim for user-profile persistence, e.g. eoepca-userman-pvc The boolen value volumeClaim.create can be used for the PVC to be created by the helm release. This creates a volume of type host-path and, hence, is only useful for single-node development usage. Example user-profile-values.yaml \u2026 global: domain: auth.192.168.49.123.nip.io nginxIp: 192.168.49.123 volumeClaim: name: eoepca-userman-pvc create: false","title":"Values"},{"location":"user-profile/#user-profile-usage","text":"The User Profile is accessed through the /web_ui path of the Login Service, e.g. http://auth.kube.guide.eoepca.org/web_ui.","title":"User Profile Usage"},{"location":"user-profile/#additional-information","text":"Additional information regarding the User Profile can be found at: Helm Chart Wiki GitHub Repository","title":"Additional Information"},{"location":"workspace/","text":"Workspace \u2693\ufe0e The Workspace provides protected user resource management that includes dedicated storage and services for resource discovery and access. Workspace API \u2693\ufe0e The Workspace API provides a REST service through which user workspaces can be created, interrogated, managed and deleted. Helm Chart \u2693\ufe0e The Workspace API is deployed via the rm-workspace-api helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the um-workspace-api chart . helm install --values workspace-api-values.yaml workspace-api eoepca/rm-workspace-api Values \u2693\ufe0e At minimum, values for the following attributes should be specified: The fully-qualified public URL for the service (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the Workspace API will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . Prefix for user projects in OpenStack Details for underlying S3 object storage service Identification of secret that provides the client credentials for resource protection Example workspace-api-values.yaml \u2026 fullnameOverride: workspace-api ingress: enabled: true hosts: - host: workspace-api.192.168.49.123.nip.io paths: [\"/\"] tls: - hosts: - workspace-api.192.168.49.123.nip.io secretName: workspace-api-tls prefixForName: \"demo-user\" s3Endpoint: \"https://cf2.cloudferro.com:8080\" s3Region: \"RegionOne\" workspaceDomain: 192.168.49.123.nip.io umaClientSecretName: \"resman-client\" umaClientSecretNamespace: \"rm\" Protection \u2693\ufe0e As described in section Resource Protection , the resource-guard component can be inserted into the request path of the Workspace API service to provide access authorization decisions helm install --values workspace-api-guard-values.yaml workspace-api-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the Workspace API for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent ( uma-user-agent )\u2026 Example workspace-api-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: workspace-api pep: workspace-api-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth # customDefaultResources: # - name: \"Eric's workspace\" # description: \"Protected Access for eric to his user workspace\" # resource_uri: \"/workspaces/demo-user-eric\" # scopes: [] # default_owner: \"d3688daa-385d-45b0-8e04-2062e3e2cd86\" # - name: \"Bob's workspace\" # description: \"Protected Access for bob to his user workspace\" # resource_uri: \"/workspaces/demo-user-bob\" # scopes: [] # default_owner: \"f12c2592-0332-49f4-a4fb-7063b3c2a889\" volumeClaim: name: eoepca-resman-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: workspace-api-agent nginxIntegration: enabled: true hosts: - host: workspace-api paths: - path: /(.*) service: name: workspace-api port: http annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"resman-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint Client Secret \u2693\ufe0e The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n rm create secret generic resman-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > resman-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: resman-client namespace: rm data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io . In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml Workspace API Usage \u2693\ufe0e The Workspace API provides a REST interface that is accessed at the endpoint https://workspace-api.192.168.49.123.nip.io/. See the Swagger Docs . Additional Information \u2693\ufe0e Additional information regarding the Workspace API can be found at: Helm Chart Wiki GitHub Repository Bucket Operator \u2693\ufe0e The Workspace API creates workspaces for individual users. In doing so, dedicated object storage buckets are created associated to each user workspace - for self-contained storage of user owned resources (data, processing applications, etc.). The bucket creation relies upon the object storage services of the underlying cloud infrastructure. We have created a Bucket abstraction as a Kubernetes Custom Resource Definition . This is served by a Bucket Operator service that deploys into the Kubernetes cluster to satisfy requests for resources of type Bucket . We provide a Bucket Operator implementation that currently supports the creation of buckets in OpenStack object storage - currently tested only on the CREODIAS (Cloudferro). For v1.0, we do not have a helm chart for the Bucket Operator, which must be installed to the Kubernetes cluster directly using yaml. For example yaml files see our Bucket Operator deployment in our demo cluster - which can be adapted for your deployment.","title":"Workspace"},{"location":"workspace/#workspace","text":"The Workspace provides protected user resource management that includes dedicated storage and services for resource discovery and access.","title":"Workspace"},{"location":"workspace/#workspace-api","text":"The Workspace API provides a REST service through which user workspaces can be created, interrogated, managed and deleted.","title":"Workspace API"},{"location":"workspace/#helm-chart","text":"The Workspace API is deployed via the rm-workspace-api helm chart from the EOEPCA Helm Chart Repository . The chart is configured via values that are fully documented in the README for the um-workspace-api chart . helm install --values workspace-api-values.yaml workspace-api eoepca/rm-workspace-api","title":"Helm Chart"},{"location":"workspace/#values","text":"At minimum, values for the following attributes should be specified: The fully-qualified public URL for the service (optional) Specification of Ingress for reverse-proxy access to the service Note that this is only required in the case that the Workspace API will not be protected by the resource-guard component - ref. Resource Protection . Otherwise the ingress will be handled by the resource-guard - use ingress.enabled: false . Prefix for user projects in OpenStack Details for underlying S3 object storage service Identification of secret that provides the client credentials for resource protection Example workspace-api-values.yaml \u2026 fullnameOverride: workspace-api ingress: enabled: true hosts: - host: workspace-api.192.168.49.123.nip.io paths: [\"/\"] tls: - hosts: - workspace-api.192.168.49.123.nip.io secretName: workspace-api-tls prefixForName: \"demo-user\" s3Endpoint: \"https://cf2.cloudferro.com:8080\" s3Region: \"RegionOne\" workspaceDomain: 192.168.49.123.nip.io umaClientSecretName: \"resman-client\" umaClientSecretNamespace: \"rm\"","title":"Values"},{"location":"workspace/#protection","text":"As described in section Resource Protection , the resource-guard component can be inserted into the request path of the Workspace API service to provide access authorization decisions helm install --values workspace-api-guard-values.yaml workspace-api-guard eoepca/resource-guard The resource-guard must be configured with the values applicable to the Workspace API for the Policy Enforcement Point ( pep-engine ) and the UMA User Agent ( uma-user-agent )\u2026 Example workspace-api-guard-values.yaml \u2026 #--------------------------------------------------------------------------- # Global values #--------------------------------------------------------------------------- global: context: workspace-api pep: workspace-api-pep domain: 192.168.49.123.nip.io nginxIp: 192.168.49.123 certManager: clusterIssuer: letsencrypt-staging #--------------------------------------------------------------------------- # PEP values #--------------------------------------------------------------------------- pep-engine: configMap: asHostname: auth pdpHostname: auth # customDefaultResources: # - name: \"Eric's workspace\" # description: \"Protected Access for eric to his user workspace\" # resource_uri: \"/workspaces/demo-user-eric\" # scopes: [] # default_owner: \"d3688daa-385d-45b0-8e04-2062e3e2cd86\" # - name: \"Bob's workspace\" # description: \"Protected Access for bob to his user workspace\" # resource_uri: \"/workspaces/demo-user-bob\" # scopes: [] # default_owner: \"f12c2592-0332-49f4-a4fb-7063b3c2a889\" volumeClaim: name: eoepca-resman-pvc create: false #--------------------------------------------------------------------------- # UMA User Agent values #--------------------------------------------------------------------------- uma-user-agent: fullnameOverride: workspace-api-agent nginxIntegration: enabled: true hosts: - host: workspace-api paths: - path: /(.*) service: name: workspace-api port: http annotations: nginx.ingress.kubernetes.io/proxy-read-timeout: \"600\" nginx.ingress.kubernetes.io/enable-cors: \"true\" nginx.ingress.kubernetes.io/rewrite-target: /$1 client: credentialsSecretName: \"resman-client\" logging: level: \"info\" unauthorizedResponse: 'Bearer realm=\"https://auth.192.168.49.123.nip.io/oxauth/auth/passport/passportlogin.htm\"' openAccess: false insecureTlsSkipVerify: true NOTES: TLS is enabled by the specification of certManager.clusterIssuer The letsencrypt Cluster Issuer relies upon the deployment being accessible from the public internet via the global.domain DNS name. If this is not the case, e.g. for a local minikube deployment in which this is unlikely to be so. In this case the TLS will fall-back to the self-signed certificate built-in to the nginx ingress controller insecureTlsSkipVerify may be required in the case that good TLS certificates cannot be established, e.g. if letsencrypt cannot be used for a local deployment. Otherwise the certificates offered by login-service Authorization Server will fail validation in the Resource Guard . customDefaultResources can be specified to apply initial protection to the endpoint","title":"Protection"},{"location":"workspace/#client-secret","text":"The Resource Guard requires confidential client credentials to be configured through the file client.yaml , delivered via a kubernetes secret.. Example client.yaml \u2026 client-id: a98ba66e-e876-46e1-8619-5e130a38d1a4 client-secret: 73914cfc-c7dd-4b54-8807-ce17c3645558 Example Secret \u2026 kubectl -n rm create secret generic resman-client \\ --from-file=client.yaml \\ --dry-run=client -o yaml \\ > resman-client-secret.yaml apiVersion: v1 kind: Secret metadata: name: resman-client namespace: rm data: client.yaml: Y2xpZW50LWlkOiBhOThiYTY2ZS1lODc2LTQ2ZTEtODYxOS01ZTEzMGEzOGQxYTQKY2xpZW50LXNlY3JldDogNzM5MTRjZmMtYzdkZC00YjU0LTg4MDctY2UxN2MzNjQ1NTU4 The client credentials are obtained by registration of a client at the login service web interface - e.g. https://auth.192.168.49.123.nip.io . In addition there is a helper script that can be used to create a basic client and obtain the credentials, as described in section Resource Protection \u2026 ./local-deploy/bin/register-client auth.192.168.49.123.nip.io \"Resource Guard\" client.yaml","title":"Client Secret"},{"location":"workspace/#workspace-api-usage","text":"The Workspace API provides a REST interface that is accessed at the endpoint https://workspace-api.192.168.49.123.nip.io/. See the Swagger Docs .","title":"Workspace API Usage"},{"location":"workspace/#additional-information","text":"Additional information regarding the Workspace API can be found at: Helm Chart Wiki GitHub Repository","title":"Additional Information"},{"location":"workspace/#bucket-operator","text":"The Workspace API creates workspaces for individual users. In doing so, dedicated object storage buckets are created associated to each user workspace - for self-contained storage of user owned resources (data, processing applications, etc.). The bucket creation relies upon the object storage services of the underlying cloud infrastructure. We have created a Bucket abstraction as a Kubernetes Custom Resource Definition . This is served by a Bucket Operator service that deploys into the Kubernetes cluster to satisfy requests for resources of type Bucket . We provide a Bucket Operator implementation that currently supports the creation of buckets in OpenStack object storage - currently tested only on the CREODIAS (Cloudferro). For v1.0, we do not have a helm chart for the Bucket Operator, which must be installed to the Kubernetes cluster directly using yaml. For example yaml files see our Bucket Operator deployment in our demo cluster - which can be adapted for your deployment.","title":"Bucket Operator"}]}