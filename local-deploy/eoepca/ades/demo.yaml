---
# Source: ades/templates/processing-manager-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ades-processing-manager
  labels:
    helm.sh/chart: ades-0.9.10
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
    app.kubernetes.io/version: "0.9.7"
    app.kubernetes.io/managed-by: Helm
---
# Source: ades/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ades
  labels:
    helm.sh/chart: ades-0.9.10
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
    app.kubernetes.io/version: "0.9.7"
    app.kubernetes.io/managed-by: Helm
---
# Source: ades/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ades-configmap
  namespace: proc
  labels:
    chart: "ades-0.9.10"
    release: ades
    heritage: Helm
data:
  ppImagePullSecrets.json: "[]"
  kubeconfig: ""
  maincfg: "[headers]\nX-Powered-By=ZOO@ZOO-Project\n\n[main]\nversion=2.0.0\nencoding=utf-8\n__rewriteUrl=call\ndataPath=/var/www/data\ntmpPath=/var/www/_run/res\nsessPath=/tmp\ncacheDir=/var/www/cache\nlang=en-US,en-GB\nlanguage=en-US\nmsOgcVersion=1.0.0\ntmpUrl=/res\ncors=false\nstoreExecuteResponse=true\nservicePath=/zooservices/\n\n[identification]\ntitle=Ellip-WPS\nkeywords=\nabstract=\naccessConstraints=none\nfees=None\n\n[provider]\npositionName=xxxx\nproviderName=xxxx\naddressAdministrativeArea=False\naddressDeliveryPoint=xxxxx\naddressCountry=IT\nphoneVoice=+xxxxx\naddressPostalCode=xxx\nrole=Support\nproviderSite=https://www.xxxxx.com\nphoneFacsimile=False\naddressElectronicMailAddress=support@xxxx.com\naddressCity=xx\nindividualName=Operations Support team\n\n[java]\n\n[javax]\n\n[env]\n\n[database]\n\n[jwt]\nsecret=\ncert1=\ncert2=\n\n[serviceConf]\nsleepGetStatus=100\nsleepGetPrepare=30\nsleepBeforeRes=30\n\n[pep]\npepresource=/opt/t2service/libpep_resource.so\nusepep=true\npephost=http://proc-ades-pep:5576\nscopes=public\npathBase=/%s/wps3/processes/%s\npathStatus=/%s/watchjob/processes/%s/jobs/%s\npathResult=/%s/watchjob/processes/%s/jobs/%s/result\nstopOnError=true\n\n[resourcemanager]\nuseResourceManager=true\nresourceManagerEndpoint=https://workspace-api.test.demo.eoepca.org\nresourceManagerWorkspacePrefix= demo-user\n\n[eoepca]\nowsparser=/opt/t2libs/libeoepcaows.so\nbuildPath=/opt/t2template/\n\nWorkflowExecutorHost=http://localhost:8000\nWorkflowExecutorConfig=/opt/t2config/workflowwxecutorconfig.json\nlibWorkflowExecutor=/opt/t2service/libworkflow_executor.so\n\nuserworkspace=/opt/zooservices_user\ndefaultUser=anonymous\nuserSpaceScript=/opt/t2scripts/prepareUserSpace.sh\nremoveServiceScript=/opt/t2scripts/removeservice.sh"
  main.cwl: ""
  stagein.cwl: "cwlVersion: v1.0\nbaseCommand: Stars\ndoc: \"Run Stars for staging input data\"\nclass: CommandLineTool\nhints:\n  DockerRequirement:\n    dockerPull: terradue/stars:1.0.0-beta.7\nid: stars\narguments:\n- copy\n- -v\n- -rel\n- -r\n- '4'\n- -o\n- ./\n- --harvest\ninputs: \n  ADES_STAGEIN_AWS_SERVICEURL: \n    type: string?\n  ADES_STAGEIN_AWS_ACCESS_KEY_ID:\n    type: string?\n  ADES_STAGEIN_AWS_SECRET_ACCESS_KEY:\n    type: string?\noutputs: {}\nrequirements:\n  EnvVarRequirement:\n    envDef:\n      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n      # AWS__Profile: $(inputs.aws_profile)\n      # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)\n      AWS__ServiceURL: $(inputs.ADES_STAGEIN_AWS_SERVICEURL)\n      AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEIN_AWS_ACCESS_KEY_ID)\n      AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEIN_AWS_SECRET_ACCESS_KEY)\n  ResourceRequirement: {}\n"
  stageout.cwl: "cwlVersion: v1.0\nbaseCommand: Stars\ndoc: \"Run Stars for staging results\"\nclass: CommandLineTool\nhints:\n  DockerRequirement:\n    dockerPull: terradue/stars-t2:0.6.18.19\nid: stars\narguments:\n- copy\n- -v\n- -r\n- '4'\ninputs: \n  ADES_STAGEOUT_AWS_PROFILE:\n    type: string?\n  ADES_STAGEOUT_AWS_SERVICEURL: \n    type: string?\n  ADES_STAGEOUT_AWS_ACCESS_KEY_ID: \n    type: string?\n  ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY: \n    type: string?\n  aws_profiles_location:\n    type: File?\n  result_directory:\n    type: Directory?\n    inputBinding:\n      position: 7\n  ADES_STAGEOUT_OUTPUT:\n    type: string?\n    inputBinding:\n      position: 5\n      prefix: -o\n      valueFrom: $( self + \"/\" + inputs.process )\n  ADES_STAGEOUT_AWS_REGION:\n    type: string?\n  process:\n    type: string?\n    inputBinding:\n      position: 6\n      prefix: -res\n      valueFrom: $( inputs.process + \".res\" )\noutputs: {}\nrequirements:\n  InlineJavascriptRequirement: {}\n  EnvVarRequirement:\n    envDef:\n      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n      AWS__ServiceURL: $(inputs.ADES_STAGEOUT_AWS_SERVICEURL)\n      AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEOUT_AWS_ACCESS_KEY_ID)\n      AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY)\n      AWS__SignatureVersion: \"2\"\n  ResourceRequirement: {}\n"
  rulez.cwl: ""
  wfinputs.yaml: "APP: ades\nSTAGEIN_AWS_ACCESS_KEY_ID: test\nSTAGEIN_AWS_SECRET_ACCESS_KEY: test\nSTAGEIN_AWS_SERVICEURL: http://data.cloudferro.com"
  pod_env_vars.yaml: "{}"
---
# Source: ades/templates/processing-services-pv-claim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ades-processing-services
  namespace: proc
  labels:
    app: ades
    chart: "ades-0.9.10"
    release: ades
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  storageClassName: "managed-nfs-storage"
  resources:
    requests:
      storage:  "5Gi"
---
# Source: ades/templates/user-data-pv-claim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ades-user-data
  namespace: proc
  labels:
    app: ades
    chart: "ades-0.9.10"
    release: ades
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  storageClassName: "managed-nfs-storage"
  resources:
    requests:
      storage: "10Gi"
---
# Source: ades/templates/processing-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ades-processing
subjects:
  - kind: ServiceAccount
    name: ades-processing-manager
    namespace: proc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
# Source: ades/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: ades-kubeproxy
spec:
  type: ClusterIP
  ports:
    - port: 8001
      targetPort: 8001
      protocol: TCP
      name: http-kubeproxy
  selector:
    app.kubernetes.io/name: ades-kubeproxy
---
# Source: ades/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ades
  labels:
    helm.sh/chart: ades-0.9.10
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
    app.kubernetes.io/version: "0.9.7"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
---
# Source: ades/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ades-kubeproxy
  labels:
    app.kubernetes.io/name: ades-kubeproxy
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ades-kubeproxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ades-kubeproxy
    spec:
      serviceAccountName: ades-processing-manager
      securityContext:
        {}
      containers:
        - name: ades-kubeproxy
          securityContext:
            {}
          image: "eoepca/kubectl-proxy:0.9.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 8001
      restartPolicy: Always
---
# Source: ades/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ades
  labels:
    helm.sh/chart: ades-0.9.10
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
    app.kubernetes.io/version: "0.9.7"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ades
      app.kubernetes.io/instance: ades
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ades
        app.kubernetes.io/instance: ades
    spec:
      serviceAccountName: ades
      securityContext:
        {}
      containers:
        - name: ades
          securityContext:
            {}
          image: "eoepca/proc-ades:0.9.7"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          readinessProbe:
            httpGet:
              path: /terradue/wps3/processes
              port: http
              httpHeaders:
              - name: Accept
                value: application/json
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 2Gi
          env:
            - name: HTTP_PROXY
              value: "http://ades-kubeproxy:8001"
            - name: ADES_NAMESPACE
              value: proc
            - name: ADES_CWL_INPUTS
              value: /var/etc/ades/wfinputs.yaml
            - name: ADES_POD_ENV_VARS
              value: /var/etc/ades/pod_env_vars.yaml
            - name: STORAGE_CLASS
              value: "managed-nfs-storage"
            - name: VOLUME_TMP_SIZE
              value: "6Gi"
            - name: VOLUME_OUTPUT_SIZE
              value: "6Gi"
            - name: JOB_MAX_RAM
              value: "8Gi"
            - name: JOB_MAX_CORES
              value: "4"
            - name: JOB_KEEPWORKSPACE
              value: "False"
            - name: JOB_KEEPWORKSPACE_IF_FAILED
              value: "false"
            - name: ADES_WFEXEC_MAINCWL
              value: /var/etc/ades/main.cwl
            - name: ADES_WFEXEC_STAGEIN_CWL
              value: /var/etc/ades/stagein.cwl
            - name: ADES_WFEXEC_STAGEOUT_CWL
              value: /var/etc/ades/stageout.cwl
            - name: ADES_WFEXEC_RULEZ_CWL
              value: /var/etc/ades/rulez.cwl
            - name: IMAGE_PULL_SECRETS
              value: /var/etc/ades/ppImagePullSecrets.json
            - name: USE_RESOURCE_MANAGER
              value: "true"
            - name: RESOURCE_MANAGER_USERNAME
              value: 
            - name: RESOURCE_MANAGER_ENDPOINT
              value: "https://workspace-api.test.demo.eoepca.org"
            - name: RESOURCE_MANAGER_WORKSPACE_PREFIX
              value: "demo-user"
            - name: ADES_BACKOFF_LIMIT
              value: "3"
            - name: ADES_PLATFORM_DOMAIN
              value: "https://test.demo.eoepca.org"
            - name: PEP_CLIENT_STATE_PATH
              value: "/opt/zooservices_user/pepclient"

  
          volumeMounts:
            - name: ades-config
              mountPath: /var/etc/ades
            - name: ades-user-data
              mountPath: /var/www/html/res
            - name: ades-processing-services
              mountPath: /opt/zooservices_user
            - name: ades-config
              mountPath: /zooservices/main.cfg
              subPath: maincfg
      volumes:
        - name: ades-config
          configMap:
            name: ades-configmap
        - name: ades-user-data
          persistentVolumeClaim:
            claimName: ades-user-data
        - name: ades-processing-services
          persistentVolumeClaim:
            claimName: ades-processing-services
      restartPolicy: Always
---
# Source: ades/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ades
  labels:
    helm.sh/chart: ades-0.9.10
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
    app.kubernetes.io/version: "0.9.7"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "ades-open.demo.eoepca.org"
      http:
        paths:
          - path: /
            backend:
              serviceName: ades
              servicePort: 80
---
# Source: ades/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ades-test-connection"
  labels:
    helm.sh/chart: ades-0.9.10
    app.kubernetes.io/name: ades
    app.kubernetes.io/instance: ades
    app.kubernetes.io/version: "0.9.7"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['ades:80']
  restartPolicy: Never
