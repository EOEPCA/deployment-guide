{{- if eq (getenv "INGRESS_CLASS") "nginx" }}
ingress:
  enabled: true
  className: "nginx"
  annotations:
    {{- range $key, $value := (datasource "annotations") }}
    {{ $key }}: "{{ $value }}"
    {{- end }}
  host: "eoapi.{{ getenv "INGRESS_HOST" }}"
  {{- if eq ( getenv "HTTP_SCHEME" ) "https" }}
  tls:
    enabled: true
    certManager: false
    secretName: "eoapi-tls"
  {{- end }}
{{- else }}
ingress:
  enabled: false
{{- end }}
{{- if eq (getenv "USE_EXTERNAL_POSTGRES") "yes" }}
postgresql:
  type: "external-secret"
  external:
    existingSecret:
      name: "{{ getenv "POSTGRES_EXTERNAL_SECRET_NAME" }}"
      keys:
        username: "user"
        password: "password"
        host: "host"
        port: "port"
        database: "dbname"
postgrescluster:
  enabled: false
{{- else }}
postgresql:
  type: "postgrescluster"
postgrescluster:
  enabled: true
  postgresVersion: 16
  postGISVersion: "3.4"
  pgBouncerReplicas: 1
  monitoring: false
  backupsEnabled: true
  backupsStorageClassName: {{ getenv "PERSISTENT_STORAGECLASS" }}
  backupsSize: 100Mi
  instances:
    - name: eoapi
      replicas: {{ getenv "POSTGRES_REPLICAS" | default "1" }}
      dataVolumeClaimSpec:
        storageClassName: {{ getenv "PERSISTENT_STORAGECLASS" }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ getenv "POSTGRES_STORAGE_SIZE" | default "1Gi" }}
{{- end }}

pgstacBootstrap:
  enabled: true
  settings:
    envVars:
      KEEP_ALIVE: "false"

raster:
  enabled: true
  ingress:
    path: "/raster"
  overrideRootPath: "/"
  image:
    tag: "1.4.0"
  settings:
    envVars:
      AWS_S3_ENDPOINT: "{{ getenv "S3_ENDPOINT" }}"
      AWS_VIRTUAL_HOSTING: "FALSE"
    envSecrets:
      - data-access
    resources:
      requests:
        memory: "3072Mi"

multidim:
  enabled: true
  ingress:
    path: "/multidim"
  overrideRootPath: "/"
  settings:
    envSecrets:
      - data-access
    resources:
      requests:
        memory: "1024Mi"

stac:
  enabled: true
  settings:
    envVars:
      {{- if eq (getenv "ENABLE_TRANSACTIONS") "yes" }}
      ENABLE_TRANSACTIONS_EXTENSIONS: "TRUE"
      {{- end }}
      STAC_API_URL: "https://eoapi.${INGRESS_HOST}/stac"
    resources:
      limits:
        cpu: "1280m"
        memory: "1536Mi"
      requests:
        cpu: "512m"

vector:
  enabled: true
  settings:
    resources:
      limits:
        memory: "1536Mi"
      requests:
        memory: "1024Mi"
    envVars:
      TIPG_DEBUG: "True"
      TIPG_CATALOG_TTL: "30"
{{- if eq (getenv "ENABLE_EOAPI_NOTIFIER") "yes" }}
eoapi-notifier:
  enabled: true
  config:
    sources:
      - type: pgstac
        config:
          channel: "pgstac_items_change"
          connection:
            {{- if eq (getenv "USE_EXTERNAL_POSTGRES") "yes" }}
            existingSecret:
              name: "{{ getenv "POSTGRES_EXTERNAL_SECRET_NAME" }}"
              keys:
                username: "user"
                password: "password"
                host: "host"
                port: "port"
                database: "dbname"
            {{- else }}
            # For internal PostgreSQL, reference the secret created by postgres operator
            existingSecret:
              name: "eoapi-pguser-eoapi"
              keys:
                username: "user"
                password: "password"
                host: "host"
                port: "port"
                database: "dbname"
            {{- end }}
    outputs:
      - type: cloudevents
        config:
          source: /eoapi/pgstac
          event_type: org.eoapi.stac.item
          destination:
            ref:
              apiVersion: eventing.knative.dev/v1
              kind: Broker
              name: primary
              namespace: default
{{- else }}
# eoapi-notifier disabled
eoapi-notifier:
  enabled: false
{{- end }}