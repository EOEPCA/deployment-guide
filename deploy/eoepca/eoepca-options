
# Re-entry guard
if [ -z "${_EOEPCA_OPTIONS_}" ]; then
  export _EOEPCA_OPTIONS_="yes"

  # TLS options
  export USE_TLS="${USE_TLS:-true}"
  export TLS_CLUSTER_ISSUER="${TLS_CLUSTER_ISSUER:-letsencrypt-staging}"
  if [ "${USE_TLS}" = "false" ]; then export TLS_CLUSTER_ISSUER="notls"; fi

  # Required Components
  #
  # Cluster
  export REQUIRE_MINIKUBE="${REQUIRE_MINIKUBE:-true}"
  export REQUIRE_INGRESS_NGINX="${REQUIRE_INGRESS_NGINX:-true}"
  export REQUIRE_CERT_MANAGER="${REQUIRE_CERT_MANAGER:-${USE_TLS}}"
  export REQUIRE_LETSENCRYPT="${REQUIRE_LETSENCRYPT:-${USE_TLS}}"
  export REQUIRE_SEALED_SECRETS="${REQUIRE_SEALED_SECRETS:-false}"
  export REQUIRE_MINIO="${REQUIRE_MINIO:-$(if [ "${STAGEOUT_TARGET}" = "minio" ]; then echo "true"; else if [ "${REQUIRE_DATA_ACCESS}" = "false" -a "${REQUIRE_WORKSPACE_API}" = "false" ]; then echo "false"; else echo "true"; fi; fi)}"
  # EOEPCA
  export REQUIRE_STORAGE="${REQUIRE_STORAGE:-true}"
  export REQUIRE_DUMMY_SERVICE="${REQUIRE_DUMMY_SERVICE:-false}"
  export REQUIRE_IDENTITY_SERVICE="${REQUIRE_IDENTITY_SERVICE:-true}"
  export REQUIRE_ADES="${REQUIRE_ADES:-true}"
  export REQUIRE_RESOURCE_CATALOGUE="${REQUIRE_RESOURCE_CATALOGUE:-true}"
  export REQUIRE_DATA_ACCESS="${REQUIRE_DATA_ACCESS:-true}"
  export REQUIRE_REGISTRATION_API="${REQUIRE_REGISTRATION_API:-true}"
  export REQUIRE_WORKSPACE_API="${REQUIRE_WORKSPACE_API:-true}"
  export REQUIRE_HARBOR="${REQUIRE_HARBOR:-${REQUIRE_WORKSPACE_API}}"
  export REQUIRE_PORTAL="${REQUIRE_PORTAL:-true}"
  export REQUIRE_APPLICATION_HUB="${REQUIRE_APPLICATION_HUB:-true}"
# EOEPCA protection
  export REQUIRE_DUMMY_SERVICE_PROTECTION="${REQUIRE_DUMMY_SERVICE_PROTECTION:-$(if [ "${REQUIRE_DUMMY_SERVICE}" = "true" -a "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "true"; else echo "false"; fi)}"
  export REQUIRE_ADES_PROTECTION="${REQUIRE_ADES_PROTECTION:-$(if [ "${REQUIRE_ADES}" = "true" -a "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "true"; else echo "false"; fi)}"
  export REQUIRE_RESOURCE_CATALOGUE_PROTECTION="${REQUIRE_RESOURCE_CATALOGUE_PROTECTION:-$(if [ "${REQUIRE_RESOURCE_CATALOGUE}" = "true" -a "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "true"; else echo "false"; fi)}"
  export REQUIRE_DATA_ACCESS_PROTECTION="${REQUIRE_DATA_ACCESS_PROTECTION:-$(if [ "${REQUIRE_DATA_ACCESS}" = "true" -a "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "true"; else echo "false"; fi)}"
  export REQUIRE_REGISTRATION_API_PROTECTION="${REQUIRE_REGISTRATION_API_PROTECTION:-$(if [ "${REQUIRE_REGISTRATION_API}" = "true" -a "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "true"; else echo "false"; fi)}"
  export REQUIRE_WORKSPACE_API_PROTECTION="${REQUIRE_WORKSPACE_API_PROTECTION:-$(if [ "${REQUIRE_WORKSPACE_API}" = "true" -a "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "true"; else echo "false"; fi)}"

  # Minikube options
  export MINIKUBE_VERSION="${MINIKUBE_VERSION:-v1.32.0}"
  export MINIKUBE_KUBERNETES_VERSION="${MINIKUBE_KUBERNETES_VERSION:-v1.22.5}"
  export MINIKUBE_CPU_AMOUNT="${MINIKUBE_CPU_AMOUNT:-max}"
  export MINIKUBE_MEMORY_AMOUNT="${MINIKUBE_MEMORY_AMOUNT:-12g}"
  export MINIKUBE_DISK_AMOUNT="${MINIKUBE_DISK_AMOUNT:-20g}"
  # We assume use of a public IP for external traffic ingress and use of letsencrypt tls
  export MINIKUBE_EXTRA_OPTIONS="${MINIKUBE_EXTRA_OPTIONS:---ports=80:80,443:443}"

  # Ingress options
  export USE_METALLB="${USE_METALLB:-false}"
  export USE_INGRESS_NGINX_HELM="${USE_INGRESS_NGINX_HELM:-true}"
  export USE_INGRESS_NGINX_LOADBALANCER="${USE_INGRESS_NGINX_LOADBALANCER:-$(if [ "${REQUIRE_MINIKUBE}" = "true" ]; then echo "false"; else echo "true"; fi)}"
  export OPEN_INGRESS="${OPEN_INGRESS:-$(if [ "${REQUIRE_IDENTITY_SERVICE}" = "true" ]; then echo "false"; else echo "true"; fi)}"

  # Default Credentials
  export IDENTITY_SERVICE_DEFAULT_SECRET="${IDENTITY_SERVICE_DEFAULT_SECRET:-changeme}"
  export IDENTITY_SERVICE_ADMIN_USER="${IDENTITY_SERVICE_ADMIN_USER:-admin}"
  export IDENTITY_SERVICE_ADMIN_PASSWORD="${IDENTITY_SERVICE_ADMIN_PASSWORD:-${IDENTITY_SERVICE_DEFAULT_SECRET}}"
  export IDENTITY_SERVICE_ADMIN_CLIENT="${IDENTITY_SERVICE_ADMIN_CLIENT:-admin-cli}"
  export IDENTITY_POSTGRES_PASSWORD="${IDENTITY_POSTGRES_PASSWORD:-${IDENTITY_SERVICE_DEFAULT_SECRET}}"
  export IDENTITY_GATEKEEPER_CLIENT_SECRET="${IDENTITY_GATEKEEPER_CLIENT_SECRET:-${IDENTITY_SERVICE_DEFAULT_SECRET}}"
  export IDENTITY_GATEKEEPER_ENCRYPTION_KEY="${IDENTITY_GATEKEEPER_ENCRYPTION_KEY:-changemechangeme}"
  export MINIO_ROOT_USER="${MINIO_ROOT_USER:-eoepca}"
  export MINIO_ROOT_PASSWORD="${MINIO_ROOT_PASSWORD:-changeme}"
  export HARBOR_ADMIN_PASSWORD="${HARBOR_ADMIN_PASSWORD:-changeme}"

  # Storage
  export DEFAULT_STORAGE="${DEFAULT_STORAGE:-standard}"
  export MINIO_STORAGE="${MINIO_STORAGE:-${DEFAULT_STORAGE}}"
  export ADES_STORAGE="${ADES_STORAGE:-${DEFAULT_STORAGE}}"
  export APPLICATION_HUB_STORAGE="${APPLICATION_HUB_STORAGE:-${DEFAULT_STORAGE}}"
  export DATA_ACCESS_STORAGE="${DATA_ACCESS_STORAGE:-${DEFAULT_STORAGE}}"
  export HARBOR_STORAGE="${HARBOR_STORAGE:-${DEFAULT_STORAGE}}"
  export RESOURCE_CATALOGUE_STORAGE="${RESOURCE_CATALOGUE_STORAGE:-${DEFAULT_STORAGE}}"

  # ADES
  export PROCESSING_MAX_RAM="${PROCESSING_MAX_RAM:-8Gi}"
  export PROCESSING_MAX_CORES="${PROCESSING_MAX_CORES:-4}"
  export PROCESSING_ZOO_IMAGE="${PROCESSING_ZOO_IMAGE:-eoepca-092ea7a2c6823dba9c6d52c383a73f5ff92d0762}"
  export STAGEOUT_TARGET="${STAGEOUT_TARGET:-workspace}"

  # Workspace
  export INSTALL_FLUX="${INSTALL_FLUX:-${REQUIRE_WORKSPACE_API}}"

  # Data
  export CREODIAS_DATA_SPECIFICATION="${CREODIAS_DATA_SPECIFICATION:-false}"

  # Identity Service
  export TEMP_FORWARDING_PORT="${TEMP_FORWARDING_PORT:-9876}"
  export IDENTITY_REALM="${IDENTITY_REALM:-master}"

  # Sanity checks
  #
  # Ingress
  if [ "${OPEN_INGRESS}" = "false" -a "${REQUIRE_IDENTITY_SERVICE}" = "false" ]; then
    echo "WARNING: ingress is neither open (OPEN_INGRESS) nor provided via protection (REQUIRE_IDENTITY_SERVICE)"
  fi
  # ADES Stage-out
  if [ "${STAGEOUT_TARGET}" = "minio" -a "${REQUIRE_MINIO}" = "false" ]; then
    echo "WARNING: stage-out target (STAGEOUT_TARGET) 'minio' has not been selected (REQUIRE_MINIO)"
  fi
  # Workspace API ~ Minio
  if [ "${REQUIRE_WORKSPACE_API}" = "true" -a "${REQUIRE_MINIO}" = "false" ]; then
    echo "WARNING: Workspace API selected (REQUIRE_WORKSPACE_API) without Minio (REQUIRE_MINIO)"
  fi
  # Workspace API ~ Harbor
  if [ "${REQUIRE_WORKSPACE_API}" = "true" -a "${REQUIRE_HARBOR}" = "false" ]; then
    echo "WARNING: Workspace API selected (REQUIRE_WORKSPACE_API) without Harbor (REQUIRE_HARBOR)"
  fi

fi
