#!/usr/bin/env bash

ORIG_DIR="$(pwd)"
cd "$(dirname "$0")"
BIN_DIR="$(pwd)"

onExit() {
  cd "${ORIG_DIR}"
}
trap onExit EXIT

source ../cluster/functions

usage="
Create a new User Workspace.
$(basename "$0") -h | -w {workspace_api} -a {auth_server} -r {realm} -c {client} -u {admin-username} -p {admin-password} -O {owner} -W {workspace-name}

where:
    -h  show help message
    -w  workspace-api service url (default: http://workspace-api.192-168-49-2.nip.io)
    -a  authorization server url (default: http://identity.keycloak.192-168-49-2.nip.io)
    -r  realm within Keycloak (default: master)
    -u  username used for authentication (default: admin)
    -p  password used for authentication (default: changeme)
    -c  client id of the bootstrap client used in the create request (default: admin-cli)
    -O  user ID of the 'owner' of the new workspace (default: workspace(-W))
    -W  name of the workspace to create (default: owner(-O))
"

main() {
  processCmdline "$@" && \
    checkInputs && \
    createWorkspace
    # echo "All GOOD"
}

processCmdline() {
  OPTIND=1  ## reset
  # Env vars expected by the 'runcurl' function
  auth_server="http://identity.keycloak.192-168-49-2.nip.io"
  realm="master"
  client="admin-cli"
  username="admin"
  password="changeme"
  # Service url
  workspace_api="http://workspace-api.192-168-49-2.nip.io"
  # Details of the new workspace to create
  owner=
  workspace=
  # Loop throught the cmdline options
  while getopts ":hw:a:r:c:u:p:O:W:" opt; do
    case "${opt}" in
      h)
        echo "${usage}"
        return 1
        ;;
      w)
        workspace_api="${OPTARG}"
        ;;
      a)
        auth_server="${OPTARG}"
        ;;
      r)
        realm="${OPTARG}"
        ;;
      c)
        client="${OPTARG}"
        ;;
      u)
        username="${OPTARG}"
        ;;
      p)
        password="${OPTARG}"
        ;;
      O)
        owner="${OPTARG}"
        if [[ -z "${workspace}" ]]; then workspace="${owner}"; fi
        ;;
      W)
        workspace="${OPTARG}"
        if [[ -z "${owner}" ]]; then workspace="${workspace}"; fi
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        return 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND-1))
}

checkInputs() {
  if ! [[ -n "${workspace_api}" && \
          -n "${auth_server}" && \
          -n "${realm}" && \
          -n "${client}" && \
          -n "${username}" && \
          -n "${password}" && \
          -n "${owner}" && \
          -n "${workspace}" \
       ]]; then
    echo "ERROR - missing arguments" >&2
    return 1
  fi
}

createWorkspace() {
  echo "Creating workspace ${workspace} owned by user ${owner}..."

  payload=$(cat - <<EOF
{
  "preferred_name": "${workspace}",
  "default_owner": "${owner}"
}
EOF
  )

  # env vars expected by runcurl
  runcurl -a -d "Create Workspace ${workspace}" -r "201 422" -- \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -X POST --data "${payload}" \
    "${workspace_api}/workspaces"
}

main "$@"
