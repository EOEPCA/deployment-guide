#!/usr/bin/env bash

ORIG_DIR="$(pwd)"
cd "$(dirname "$0")"
BIN_DIR="$(pwd)"

onExit() {
  cd "${ORIG_DIR}"
}
trap onExit EXIT

source ../cluster/functions

usage="
Add a client with protected resources.
$(basename "$0") [-h] [-a] [-i] [-u] [-p] [-c] [-s] [-t | --token t] [-r] --id id [--name name] (--secret secret | --public) [--default] [--authenticated] [--resource name] [--uris u1,u2] [--scopes s1,s2] [--users u1,u2] [--roles r1,r2]

where:
    -h                    show help message
    -a                    authorization server url - e.g. https://keycloak.192-168-49-2.nip.io
    -i                    identity-api server url - e.g. https://identity-api.192-168-49-2.nip.io
    -u                    username used for authentication
    -p                    password used for authentication
    -c                    client id (of the bootstrap client used in the create request)
    -s                    client secret (of the bootstrap client used in the create request)
    -t or --token         access token used for authentication
    -r                    realm
    --id                  client id (of the created client)
    --name                client name (of the created client)
    --secret              client secret (of the created client)
    --public              public client (no client secret)
    --default             add default resource - /* authenticated
    --authenticated       allow access to the resource only when authenticated
    --resource            resource name
    --uris                resource uris - separated by comma (,)
    --scopes              resource scopes - separated by comma (,)
    --users               user names with access to the resource - separated by comma (,)
    --roles               role names with access to the resource - separated by comma (,)
"

TEMP=$(getopt -o ha:i:u:p:c:s:t:r: --long id:,name:,description:,secret:,public,default,authenticated,resource:,uris:,scopes:,users:,roles: \
  -n "$(basename "$0")" -- "$@")

if [ $? != 0 ]; then
  exit 1
fi

eval set -- "$TEMP"

auth_server=
identity_api=
realm=
client_id=
client_name=
client_secret=
client_public=
client_description=
resource_name=
resource_uris=
resource_scopes=
users=
roles=
authenticated=false

resources=()

main() {
  checkPrerequisites
  args_count=$#
  if (( args_count > 0 )); then
    processCmdline "$@"
  else
    askForInput
  fi
  checkInputs
  createClient
  if [[ -z "${client_public}" || "${client_public}" != "true" ]]; then
    configureDefaultResource
  fi
  summariseClient
}

checkPrerequisites() {
  if ! command -v jq &> /dev/null
  then
      echo "jq command is required"
      exit 1
  fi
}

processCmdline() {
  while true; do
    case "$1" in
    --id)
      client_id="$2"
      shift 2
      ;;
    --name)
      client_name="$2"
      shift 2
      ;;
    --secret)
      client_secret="$2"
      shift 2
      ;;
    --public)
      client_public="true"
      shift
      ;;
    --description)
      client_description="$2"
      shift 2
      ;;
    --resource)
      if [ -n "${resource_name}" ]; then
        add_resource
      fi
      resource_name="$2"
      shift 2
      ;;
    --default)
      resource_name="Default Resource"
      resource_uris="/*"
      resource_scopes="view"
      users=
      roles=
      authenticated=true
      shift
      ;;
    --authenticated)
      authenticated=true
      shift
      ;;
    --uris)
      resource_uris="$2"
      shift 2
      ;;
    --scopes)
      resource_scopes="$2"
      shift 2
      ;;
    --users)
      users="$2"
      shift 2
      ;;
    --roles)
      roles="$2"
      shift 2
      ;;
    -a)
      auth_server="$2"
      shift 2
      ;;
    -i)
      identity_api="$2"
      shift 2
      ;;
    -u)
      username="$2"
      shift 2
      ;;
    -p)
      password="$2"
      shift 2
      ;;
    -c)
      client="$2"
      shift 2
      ;;
    -s)
      secret="$2"
      shift 2
      ;;
    -t | --token)
      access_token="$2"
      shift 2
      ;;
    -r)
      realm="$2"
      shift 2
      ;;
    -h)
      echo "$usage"
      exit 1
      ;;
    --)
      shift
      break
      ;;
    *) break ;;
    esac
  done

  # Ensure the 'last' resource is added
  if [ -n "$resource_name" ]; then
    add_resource
  fi
}

# no args passed, ask for input
askForInput() {
  read -rp "> Authorization Server: " auth_server
  if [ -z "$auth_server" ]; then
    auth_server="http://localhost:8080"
    echo "Using default auth_server (${auth_server})"
  fi
  read -rp "> Identity API: " identity_api
  if [ -z "$identity_api" ]; then
    identity_api="http://localhost:8080"
    echo "Using default identity_api (${identity_api})"
  fi
  read -rp "> Realm: " realm
  if [ -z "$realm" ]; then
    realm="master"
    echo "Using default realm (${realm})"
  fi
  if [ "$auth_server" != *'localhost'* ]; then
    read -rp "> [Authentication] Username (optional): " username
    read -rsp "> [Authentication] Password (optional): " password
    read -rp "> [Authentication] Client id (optional): " client
    read -rsp "> [Authentication] Client secret (optional): " secret
    if [ -n "$password" ]; then
      echo "*********"
    else
      echo ""
    fi
    if [ -z "$username" ] || [ -z "$password" ] || [ -z "$client" ] || [ -z "$secret" ]; then
      read -rsp "> [Authentication] Access token: " access_token
      if [ -n "$access_token" ]; then
        echo "******************"
      else
        echo ""
      fi
    fi
    if [ -z "$username" ] && [ -z "$password" ] && [ -z "$access_token" ]; then
      echo "Authentication is required"
      exit 1
    fi
  fi
  read -rp "> Client Id: " client_id
  read -rp "> Client Name (optional): " client_name
  read -rp "> Client Secret: " client_secret
  read -rp "> Client Description (optional): " client_description
  read -rp "> Add resource? [y/N] " add_resource_answer
  resources=()
  while [ "$add_resource_answer" == y ]; do
    read -rp "> Resource name: " resource_name
    read -rp "> Resource URIs: " resource_uris
    read -rp "> Resource scopes (optional): " resource_scopes
    if [ -z "${resource_scopes}" ]; then
      echo "Using default scope (view)"
      resource_scopes="view"
    fi
    read -rp "> Users (optional): " users
    read -rp "> Roles (optional): " roles
    if [ -z "$users" ] && [ -z "$roles" ]; then
      read -rp "> Authenticated only? [y/N] " authenticated
      if [ "$authenticated" == y ]; then
        authenticated=true
      fi
    fi
    add_resource
    read -rp "> Add resource? [y/N] " add_resource_answer
  done
}

checkInputs() {
  if [ "$auth_server" != *'localhost'* ]; then
    if [ -z "$username" ] && [ -z "$password" ] && [ -z "$access_token" ]; then
      echo "Authentication is required"
      exit 1
    fi
  fi
  if [ -z "$client_id" ]; then
    echo "Missing client id"
    exit 1
  fi
}

createClient() {
  endpoint="${identity_api}/clients"

  resourcesJson() {
    if ((${#resources[@]} > 0)); then
      cat - <<EOF
  "resources": [$(join_array , "${resources[@]}")],
EOF
    fi
  }

  secretOrPublic() {
    if [[ -n "${client_public}" && "${client_public}" == "true" ]]; then
      cat - <<EOF
  "publicClient": true,
EOF
    else
      cat - <<EOF
  "secret": "${client_secret}",
EOF
    fi
  }

  payload=$(cat - <<EOF
{
  "clientId": "${client_id}",
$(secretOrPublic)
  "name": "${client_name}",
$(resourcesJson)
  "description": "${client_description}"
}
EOF
  )

  runcurl -a -d "Create Client" -r "200 409" -- \
    -H "Content-Type: application/json" \
    -X POST --data "$payload" "$endpoint"
}

# The new client is created with a Default Resource. We need to update this
# resource to set the 'view' scope against its policy, to meet the expectations
# of the Gatekeeper.
configureDefaultResource() {
  echo "Adding 'view' scope to 'Default Resource'..."
  # Get client ID
  runcurl -a -d "Get Created Client ID" -r 200 -- \
    -X GET \
    -H "Accept: application/json" \
    "${auth_server}/admin/realms/${realm}/clients"

  createdClientId="$(jq -r --arg CLIENTID "${client_id}" '.[] | select(.clientId == $CLIENTID) | .id' <<<${response_body})"

  # Get resource ID
  runcurl -a -d "Get Default Resource ID" -r "200 404" -- \
    -X GET \
    -H "Accept: application/json" \
    "${auth_server}/admin/realms/${realm}/clients/${createdClientId}/authz/resource-server/resource"

  # Catch the case that client has no resources (e.g. client for eoepca-portal)
  if (( response_code == 404 )); then
    echo "Client has no Default Resource - skipping..."
    return
  fi
  
  defaultResourceId="$(jq -r '.[] | select(.name == "Default Resource") | ._id' <<<${response_body})"

  # Get resource details
  runcurl -a -d "Get Default Resource Details" -r 200 -- \
    -X GET \
    -H "Accept: application/json" \
    "${auth_server}/admin/realms/${realm}/clients/${createdClientId}/authz/resource-server/resource/${defaultResourceId}"

  updatedDefaultResourceDetails="$(jq '.scopes += ["view"]' <<<${response_body})"

  # Update the Default Resource
  runcurl -a -d "Update the Default Resource" -r 204 -- \
    -X PUT \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    --data "${updatedDefaultResourceDetails}" \
    "${auth_server}/admin/realms/${realm}/clients/${createdClientId}/authz/resource-server/resource/${defaultResourceId}"

  # Get resource details (again) to check the outcome
  runcurl -a -d "Check Default Resource Details" -r 200 -- \
    -X GET \
    -H "Accept: application/json" \
    "${auth_server}/admin/realms/${realm}/clients/${createdClientId}/authz/resource-server/resource/${defaultResourceId}"
}

summariseClient() {
  # Client Details...
  runcurl -a -d "Get Client Details" -r 200 -- \
    -X GET \
    -H "Accept: application/json" \
    "${auth_server}/admin/realms/${realm}/clients"
  createdClientId="$(jq -r --arg CLIENTID "${client_id}" '.[] | select(.clientId == $CLIENTID) | .id' <<<${response_body})"
  echo "Client Details..."
  jq -r --arg CLIENTID "${client_id}" '.[] | select(.clientId == $CLIENTID)' <<<${response_body}

  # Get Resources...
  runcurl -a -d "Get Client Resources" -r "200 404" -- \
    -X GET \
    -H "Accept: application/json" \
    "${auth_server}/admin/realms/${realm}/clients/${createdClientId}/authz/resource-server/resource"

  # Catch the case that client has no resources (e.g. client for eoepca-portal)
  if (( response_code == 404 )); then
    echo "Client has no resources"
  else
    echo "Client Resources..."
    jq <<<${response_body}
  fi
}

add_resource() {
  if [ -z "${resource_scopes}" ]; then
    resource_scopes="view"
  fi
  IFS=',' read -ra resource_uris_array <<<"$resource_uris"
  IFS=',' read -ra resource_scopes_array <<<"$resource_scopes"
  IFS=',' read -ra users_array <<<"$users"
  IFS=',' read -ra roles_array <<<"$roles"
  if ((${#users_array[@]} == 0 && ${#roles_array[@]} == 0)); then
    resource="{
      \"name\": \"${resource_name}\",
      \"uris\": $(json_array "${resource_uris_array[@]}"),
      \"scopes\": $(json_array "${resource_scopes_array[@]}"),
      \"permissions\": {
        \"authenticated\": ${authenticated}
      }
    }"
  else
    resource="{
      \"name\": \"${resource_name}\",
      \"uris\": $(json_array "${resource_uris_array[@]}"),
      \"scopes\": $(json_array "${resource_scopes_array[@]}"),
      \"permissions\": {
        \"user\": $(json_array "${users_array[@]}"),
        \"role\": $(json_array "${roles_array[@]}")
      }
    }"
  fi
  resources+=("$resource")
  resource_name=
  resource_uris=
  resource_scopes=
  users=
  roles=
  authenticated=false
}

json_array() {
  echo -n '['
  while [ $# -gt 0 ]; do
    x=${1//\\/\\\\}
    echo -n "\"${x//\"/\\\"}\""
    [ $# -gt 1 ] && echo -n ', '
    shift
  done
  echo ']'
}

join_array() {
  local IFS="$1"
  shift
  echo "$*"
}

main "$@"
