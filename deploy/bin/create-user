#!/usr/bin/env bash

ORIG_DIR="$(pwd)"
cd "$(dirname "$0")"
BIN_DIR="$(pwd)"

onExit() {
  cd "${ORIG_DIR}"
}
trap onExit EXIT

source ../cluster/functions

usage="
Create a new user.
$(basename "$0") -h | -a {auth_server} -r {realm} -c {client} -u {admin-username} -p {admin-password} -U {new-username} -P {new-password}

where:
    -h  show help message
    -a  authorization server url - e.g. https://auth.myplatform.mydomain
    -u  username used for authentication (admin)
    -p  password used for authentication (admin)
    -c  client id (e.g. 'admin-cli' of the bootstrap client used in the create request)
    -U  name of the (new) user to create
    -P  password for the (new) user to create
"

main() {
  processCmdline "$@" && \
    checkInputs && \
    createUser
    # echo "All GOOD"
}

processCmdline() {
  OPTIND=1  ## reset
  # Env vars expected by the 'runcurl' function
  auth_server=
  realm=
  client=
  username=
  password=
  # Details of the new user to create
  new_username=
  new_password=
  # Loop throught the cmdline options
  while getopts ":ha:r:c:u:p:U:P:" opt; do
    case "${opt}" in
      h)
        echo "${usage}"
        return 1
        ;;
      a)
        auth_server="${OPTARG}"
        ;;
      r)
        realm="${OPTARG}"
        ;;
      c)
        client="${OPTARG}"
        ;;
      u)
        username="${OPTARG}"
        ;;
      p)
        password="${OPTARG}"
        ;;
      U)
        new_username="${OPTARG}"
        ;;
      P)
        new_password="${OPTARG}"
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        return 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        return 1
        ;;
    esac
  done
  shift $((OPTIND-1))
}

checkInputs() {
  if ! [[ -n "${auth_server}" && \
          -n "${realm}" && \
          -n "${client}" && \
          -n "${username}" && \
          -n "${password}" && \
          -n "${new_username}" && \
          -n "${new_password}" \
       ]]; then
    echo "ERROR - missing arguments" >&2
    return 1
  fi
}

createUser() {
  echo "Creating user ${new_username}..."

  payload=$(cat - <<EOF
{
  "username": "${new_username}",
  "enabled": true,
  "credentials": [{
    "type": "password",
    "value": "${new_password}",
    "temporary": false
  }]
}
EOF
  )

  # env vars expected by runcurl
  runcurl -a -d "Create User ${new_username}" -r "201 409" -- \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -X POST --data "${payload}" \
    "${auth_server}/admin/realms/${realm}/users"
}

main "$@"
